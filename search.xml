<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>迭代实现部门表树形层级</title>
      <link href="/2020/02/13/%E8%BF%AD%E4%BB%A3%E5%AE%9E%E7%8E%B0%E9%83%A8%E9%97%A8%E8%A1%A8%E6%A0%91%E5%BD%A2%E5%B1%82%E7%BA%A7/"/>
      <url>/2020/02/13/%E8%BF%AD%E4%BB%A3%E5%AE%9E%E7%8E%B0%E9%83%A8%E9%97%A8%E8%A1%A8%E6%A0%91%E5%BD%A2%E5%B1%82%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># 迭代实现部门表树形层级<h2 id="方案1：先在数据库查出一级部门，再遍历每个部门，用其id作为父id查下属部门"><a href="#方案1：先在数据库查出一级部门，再遍历每个部门，用其id作为父id查下属部门" class="headerlink" title="方案1：先在数据库查出一级部门，再遍历每个部门，用其id作为父id查下属部门"></a>方案1：先在数据库查出一级部门，再遍历每个部门，用其id作为父id查下属部门</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//取出所有部门,返回的即是树形结构</span>    List<span class="token operator">&lt;</span>Department<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEvery</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//传入参数时，默认这时是零级部门，委托该方法用自身id=0去查找子部门</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Department<span class="token operator">></span> <span class="token function">getEvery</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将入参作为父id，从数据库查询子部门。此时，next为一级部门</span>    List<span class="token operator">&lt;</span>Department<span class="token operator">></span> next <span class="token operator">=</span> deptRepository<span class="token punctuation">.</span><span class="token function">findByParentId</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果当前所委托查找的pid，确实存在子部门</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Department od <span class="token operator">:</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//对子部门遍历，继续查找下属部门</span>            List<span class="token operator">&lt;</span>Department<span class="token operator">></span> sub <span class="token operator">=</span> <span class="token function">getEvery</span><span class="token punctuation">(</span>od<span class="token punctuation">.</span><span class="token function">getDept_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//一切查完后，如果当前子部门确实存在子部门（孙子部门）。此时，sub为二级部门。</span>            <span class="token comment" spellcheck="true">//将孙子部门设置为od下属</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> sub <span class="token operator">&amp;&amp;</span> sub<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                od<span class="token punctuation">.</span><span class="token function">setDepartment</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="方案2：一次性查出所有部门，减少数据库操作"><a href="#方案2：一次性查出所有部门，减少数据库操作" class="headerlink" title="方案2：一次性查出所有部门，减少数据库操作"></a>方案2：一次性查出所有部门，减少数据库操作</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepartmentServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>DepartmentMapper<span class="token punctuation">,</span> Department<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">DepartmentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DepartmentMapper departmentMapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//所有部门</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Department<span class="token operator">></span> allDepts<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Department<span class="token operator">></span> <span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查出department表的所有字段，避免多次查询的多次连接数据库</span>        allDepts <span class="token operator">=</span> departmentMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查父级id是0的所有department</span>        <span class="token keyword">return</span> <span class="token function">getSub</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用pid查询其下属部门</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Department<span class="token operator">></span> <span class="token function">getSub</span><span class="token punctuation">(</span>Integer pid<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在所有部门中筛选parentId符合条件的项，组成list</span>        <span class="token comment" spellcheck="true">//这里的depts和for循环只是为了避免多次连接数据库，所以在此筛选</span>        List<span class="token operator">&lt;</span>Department<span class="token operator">></span> depts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Department dept <span class="token operator">:</span> allDepts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dept<span class="token punctuation">.</span><span class="token function">getParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                depts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//对符合条件的 depts 进行遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Department dept <span class="token operator">:</span> depts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//得到其下属部门 subs</span>            List<span class="token operator">&lt;</span>Department<span class="token operator">></span> subs <span class="token operator">=</span> <span class="token function">getSub</span><span class="token punctuation">(</span>dept<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> subs <span class="token operator">&amp;&amp;</span> subs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将下属部门添加到当前 dept 部门</span>                dept<span class="token punctuation">.</span><span class="token function">setDepartments</span><span class="token punctuation">(</span>subs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> depts<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中，Department类如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**    * 部门ID    */</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>ID_WORKER_STR<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer deptId<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**    * 上级部门ID(默认0，无上级部门)    */</span>    <span class="token keyword">private</span> Integer parentId<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**    * 部门名称    */</span>    <span class="token keyword">private</span> String deptName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 子部门     */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Department<span class="token operator">></span> departments<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 基础代码 </tag>
            
            <tag> 树形层级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ的死信队列</title>
      <link href="/2020/02/07/RabbitMQ%E7%9A%84%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/"/>
      <url>/2020/02/07/RabbitMQ%E7%9A%84%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># RabbitMQ的死信队列<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>思考：因为在开发项目时，RabbitMQ的消费端出现了异常（工具类操作文件时，未找到文件路径）。由于在此之前并未对该异常进行预判，导致异常出现后，消费端仍然对MQ的消息进行消费，但是出现异常后无法对MQ进行回复，所以造成后果<strong>消费端一直消费该条信息，进入死循环！</strong></p><p>从而引发了自己的思考：1. 开发时难免会出现异常，这种异常如果事先未预判，那么在程序运行中，消费端该怎么避免以上出现的死循环；2. 如果事先预判到异常，对其进行了抛出或捕获，消费端又该如何表现？</p><p>带着这些问题，我查阅了很多资料…然后就发现了RabbitMQ的“死信”方案。不过好像对我的问题没什么用。但是新知识还是要学，不然怎么知道有用没用呢。</p><h2 id="死信队列的概念"><a href="#死信队列的概念" class="headerlink" title="死信队列的概念"></a>死信队列的概念</h2><ul><li>死信队列：DLX，dead-letter-exchange</li><li>场景：比如，当队列由于一些问题，导致队列中的某些消息过期、消息满载、消息被拒绝。也就是说，一些有问题的消息<strong>没有被正确“消费”</strong>时，可以借助死信队列，将这些<strong>“问题消息”传到死信交换机</strong>，再由死信交换机<strong>传到死信队列</strong>，最后由死信队列对应的消费者，消费这些“问题消息”。</li><li>死信的产生：<ol><li>消息被拒绝(basic.reject / basic.nack)，并且requeue = false</li><li>消息TTL过期</li><li>队列达到最大长度</li></ol></li></ul><h2 id="死信队列的配置"><a href="#死信队列的配置" class="headerlink" title="死信队列的配置"></a>死信队列的配置</h2><p>首先要明确，死信队列只是处理“特殊问题”的普通队列。也就是说，A交换机和a队列处理事务A，B交换机和b队列处理事务B…而死信队列的交换机和队列处理事务X，只不过这个X的任务就是去消费那些问题消息。</p><p>说到这里，其实也就没白了。死信队列和死信交换机的配置和普通的配置没有区别！</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明死信交换机</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"dead_exchange"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Exchange <span class="token function">dead_exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> ExchangeBuilder<span class="token punctuation">.</span><span class="token function">topicExchange</span><span class="token punctuation">(</span>DEAD_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明死信队列</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"dead_queue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Queue <span class="token function">dead_routing_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">"dead_queue"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//对上述进行绑定</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"dead_bind"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Binding <span class="token function">dead_bind</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"dead_queue"</span><span class="token punctuation">)</span>Queue queue<span class="token punctuation">,</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"dead_exchange"</span><span class="token punctuation">)</span>Exchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>好了，有了“特殊工作者”死信队列，那还得有普通工作者啊。毕竟我们的主要业务都是那些普通工作者做的。</p><p>配置普通队列，<strong>注意，这里才是配置死信队列成功的关键！！！</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//普通交换机声明</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"ex_media_processor"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Exchange <span class="token function">EX_MEDIA_VIDEOTASK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ExchangeBuilder<span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token string">"ex_media_processor"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明队列</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queue_media_video_processtask"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Queue <span class="token function">QUEUE_PROCESSTASK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注意，这里是死信队列配置成功的关键！！！</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//队列等待时间</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//死信队列的交换机，dead_exchange对应的是死信交换机的名称</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span><span class="token string">"dead_exchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//死信队列的路由，dev是我自己取的路由key</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Queue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>queue_media_video_processtask<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> queue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Binding <span class="token function">binding_queue_media_processtask</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queue_media_video_processtask"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span> <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ex_media_processor"</span><span class="token punctuation">)</span> Exchange exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"routingkey_media_video"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="定义生产者和消费者"><a href="#定义生产者和消费者" class="headerlink" title="定义生产者和消费者"></a>定义生产者和消费者</h2><p>这里由于是自己的项目，我也比较懒…大家就正常配一下就好了。生产者发送消息给普通的交换机”ex_media_processor”,消费者绑定并监听普通的队列”queue_media_video_processtask”，此时不必理会死信队列的相关问题，正常操作就好。</p><h2 id="死信队列演示"><a href="#死信队列演示" class="headerlink" title="死信队列演示"></a>死信队列演示</h2><p>为了使生产者发送的消息变成死信，我们可以这么做：</p><ol><li><p><strong>先启动消费端</strong>，这时可以看见页面上，死信交换机、死信队列、普通队列都已经上线！</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-c1ed014115d40a6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="消费端启动-交换机.png"></p><p>第一个红色框是普通交换机，第二个是死信交换机。</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-d746908c8b471e5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="消费端启动.png"></p><p>我们刚刚启动的两个队列，第一个是死信队列，第二个红框是普通队列；其中普通队列后标识的DLX代表死信交换机，DLK代表死信路由，也就是说，当前队列已经配置了相关属性。</p></li><li><p><strong>关闭消费端，启动生产端</strong>，注意，配置队列和交换机时要配置成持久化的，autoDelete这种配置设成false，这样在关闭消费端时，这些对应的队列、交换机不会消失。</p><p>此时，交换机和队列没有任何变化。</p></li><li><p><strong>生产端的生产者向普通交换机发送消息</strong>。此时，消息进入普通交换机，普通交换机根据路由分配给对应的普通队列。可是经过了一小段时间(设置的TTL)，该普通队列发现该消息已经过期，所以将该消息转发到死信交换机，死信交换机再根据消息的路由，转发到设定好的死信队列中。</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-cfc9d531dd0f8ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="死信队列演示-普通队列.png"></p><p>由上图可以看出，普通队列对于生产者发送的消息的“思考”：队列发现消息后，等待，等待一定时间后，发现该消息已经过期，普通队列决定扔掉它，往哪里扔呢，往曾经设置好的死信路由扔！</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-19c8c1084c276bb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="死信队列演示-死信队列.png"></p><p>由上图看出，死信队列收到了被扔过来的消息，所以出现了一个缓坡，代表收到。具体的，可以参照时间轴，在14：26：40时，普通队列扔，死信队列接，死信队列从1升成2。注，因为之前测试，所以死信队列里残存了一条历史消息。</p></li></ol><p>至此，死信队列的演示已经完成。大家可以根据具体的业务要求，监听死信队列，对“死信”进行消费处理。</p>]]></content>
      
      
      <categories>
          
          <category> 组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 死信队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式</title>
      <link href="/2020/02/03/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/02/03/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># Lambda表达式<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h4 id="1、什么是Lambda表达式"><a href="#1、什么是Lambda表达式" class="headerlink" title="1、什么是Lambda表达式"></a>1、什么是Lambda表达式</h4><p>Lambda 表达式是一种匿名函数，简单地说，它是没有声明的方法，也即没有访问修饰符、返回值声明和名字。</p><p>它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使 Java 语言的表达能力得到了提升。</p><h4 id="2、Lambda表达式的语法"><a href="#2、Lambda表达式的语法" class="headerlink" title="2、Lambda表达式的语法"></a>2、<strong>Lambda表达式的语法</strong></h4><p>基本语法: (parameters) -&gt; expression</p><p>   或者：(parameters) -&gt;{ statements; </p><p>举例说明：</p><pre><code>// 1. 不需要参数,返回值为 5  () -&gt; 5  // 2. 接收一个参数(数字类型),返回其2倍的值  x -&gt; 2 * x  // 3. 接受2个参数(数字),并返回他们的差值  (x, y) -&gt; x – y  // 4. 接收2个int型整数,返回他们的和  (int x, int y) -&gt; x + y  // 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  (String s) -&gt; System.out.print(s)  </code></pre><h4 id="3、什么是函数式接口"><a href="#3、什么是函数式接口" class="headerlink" title="3、什么是函数式接口"></a>3、什么是函数式接口</h4><p> 再对上面进行举例说明之前，必须先来理解下函数式接口，因为Lambda是建立在函数式接口的基础上的。</p><p> <strong>记住！</strong></p><p> <strong>（1）只包含一个抽象方法的接口，称为函数式接口。</strong></p><p> （2）你可以通过 Lambda 表达式来创建该接口的对象。</p><p> （3）我们可以在任意函数式接口上使用 @FunctionalInterface 注解，这样做可以检测它是否是一个函数式接口，同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</p><p>在实际开发者有两个比较常见的函数式接口：<strong>Runnable接口，Comparator接口</strong></p><p>  先举例<strong>Runnable接口相关</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.1使用匿名内部类  </span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 1.2使用 lambda 获得Runnable接口对象  </span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//=============================================================================</span>        <span class="token comment" spellcheck="true">// 2.1使用匿名内部类  </span>        Runnable race1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 2.2使用 lambda直接获得接口对象 </span>        <span class="token comment" spellcheck="true">// 若某类中有“不需要参数的方法” getTest()，</span>        <span class="token comment" spellcheck="true">// 可以用 Runnable race3 = this::getTest; 进行引用，达到内部类的实现效果</span>        <span class="token comment" spellcheck="true">// 注意，这里的 getTest() 若有返回值，也可以，下面验证！！！！</span>        Runnable race2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 直接调用 run 方法(没开新线程哦!)  </span>        race1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          race2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">*</span>输出结果 <span class="token operator">*</span> Hello world <span class="token operator">!</span> <span class="token operator">*</span> Hello world <span class="token operator">!</span> <span class="token operator">*</span> Hello world <span class="token operator">!</span> <span class="token operator">*</span> Hello world <span class="token operator">!</span> <span class="token operator">*</span>／</code></pre><p>通过上面案例可以看出：通过Lambda表达式看去舒服清爽多了，2而通过匿名内部类代码总是不够整洁。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">qoq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"xuxiaoxiao"</span><span class="token punctuation">,</span> <span class="token string">"xudada"</span><span class="token punctuation">,</span> <span class="token string">"xuzhongzhong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">pop</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------pop-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"pop"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">*</span>输出结果 <span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>pop<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>pop<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>pop<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">*</span>／</code></pre><p>再举一个例子：<strong>使用Lambda对数组排序</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArray</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> players <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"zhansgan"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token string">"zhaoliu"</span><span class="token punctuation">,</span>  <span class="token string">"wangmazi"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 1.1 使用匿名内部类根据 surname 排序 players  </span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>players<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 简单的 随意实现一下</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 1.2 使用 lambda 排序,根据 surname</span>        <span class="token comment" spellcheck="true">// 可以看到上面的被实现的方法 compare 需要两个参数，所以这里也是两个参数</span>        <span class="token comment" spellcheck="true">// 而返回值类型给定，但是其规则，却可以由自己确定。</span>        <span class="token comment" spellcheck="true">// 单从 lambda 表达式看不出是有否返回值，需要结合其实现的方法。</span>        <span class="token comment" spellcheck="true">// 比如这里，实现的 compare 方法的返回值为 int ，则 -> 后面为返回值</span>        <span class="token comment" spellcheck="true">// 若像前面的 Runnable 接口的 run 方法没有返回值，则后面的就是执行控制台。</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>players<span class="token punctuation">,</span> <span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>  s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//==================================================================================</span>        <span class="token comment" spellcheck="true">// 2.1 使用匿名内部类根据 name lenght 排序 players  </span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>players<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 2.2使用Lambda,根据name length  </span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>players<span class="token punctuation">,</span> <span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//==================================================================================</span>        <span class="token comment" spellcheck="true">// 3.1 使用匿名内部类排序 players, 根据最后一个字母  </span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>players<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 3.2 使用Lambda,根据最后一个字母</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>players<span class="token punctuation">,</span> <span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过上面例子我们再来思考为什么Lambda表达式需要函数式接口？其实很简单目的就是为来保证唯一。</p><p><strong>你的</strong>Runnable接口只要一个抽象方法，那么我用() -&gt; System.out.println(“Hello world !”)，就只能代表run方法，如果你下面还有一个抽象方法，那我使用Lambda表达式，</p><p>那鬼才知道要调用哪个抽象方法呢。</p><h2 id="二、方法引用"><a href="#二、方法引用" class="headerlink" title="二、方法引用"></a><strong>二、方法引用</strong></h2><h4 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a><strong>1、基本介绍</strong></h4><p><strong>首先注意：</strong>方法引用，不是方法调用！方法引用！方法引用！</p><p>函数式接口的实例可以通过 lambda 表达式、 方法引用、构造方法引用来创建。方法引用是 lambda 表达式的语法糖，任何用方法引用的地方都可由lambda表达式替换，</p><p>但是并不是所有的lambda表达式都可以用方法引用来替换。</p><p>举例</p><p>这就是一个打印集合所有元素的例子，value -&gt; System.out.println(value) 是一个Consumer函数式接口，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> Consumer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">andThen</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> after<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 这个函数式接口可以通过方法引用来替换。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArray</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"xuxiaoxiao"</span><span class="token punctuation">,</span> <span class="token string">"xudada"</span><span class="token punctuation">,</span> <span class="token string">"xuzhongzhong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 输出：     * xuxiaoxiao     * xudada     * xuzhongzhong     */</span><span class="token punctuation">}</span></code></pre><p>使用方法引用的方式，和上面的输出是一样的，方法引用使用的是双冒号（::）</p><pre><code>list.forEach(System.out::println);</code></pre><h4 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h4><table><thead><tr><th>类别</th><th>使用形式</th></tr></thead><tbody><tr><td>静态方法引用</td><td>类名 :: 静态方法名</td></tr><tr><td>实例方法引用</td><td>对象名(引用名) :: 实例方法名</td></tr><tr><td>类方法引用</td><td>类名 :: 实例方法名</td></tr><tr><td>构造方法引用</td><td>类名 :: new</td></tr></tbody></table><p><strong>（1）静态方法引用</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Apple</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String color<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compareByWeight</span><span class="token punctuation">(</span>Apple a1<span class="token punctuation">,</span> Apple a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> diff <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> a2<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//还有getter setter toString</span><span class="token punctuation">}</span>    </code></pre><p>有一个苹果的List，现在需要根据苹果的重量进行排序。List 的 sort 函数接收一个 Comparator 类型的参数，Comparator 是一个函数式接口，<strong>接收两个参数，返回一个int值</strong>。<strong>而Apple的静态方法compareByWeight正好符合Comparator函数式接口，所以可以使用</strong>：Apple::compareByWeight  静态方法引用来替代lambda表达式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Apple apple1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"红富士"</span><span class="token punctuation">,</span> <span class="token string">"Red"</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Apple apple2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"冯心"</span><span class="token punctuation">,</span> <span class="token string">"Yello"</span><span class="token punctuation">,</span> <span class="token number">470</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Apple apple3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"大牛"</span><span class="token punctuation">,</span> <span class="token string">"Red"</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Apple apple4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"小小"</span><span class="token punctuation">,</span> <span class="token string">"Green"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Apple<span class="token operator">></span> appleList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>apple1<span class="token punctuation">,</span> apple2<span class="token punctuation">,</span> apple3<span class="token punctuation">,</span> apple4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//lambda 表达式形式</span>        <span class="token comment" spellcheck="true">//appleList.sort((Apple a1, Apple a2) -> {</span>        <span class="token comment" spellcheck="true">//    return new Double(a1.getWeight() - a2.getWeight()).intValue();</span>        <span class="token comment" spellcheck="true">//});</span>        <span class="token comment" spellcheck="true">//静态方法引用形式（可以看出引用方法比上面的更加简单</span>        appleList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>Apple<span class="token operator">:</span><span class="token operator">:</span>compareByWeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        appleList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>apple <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'红富士'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Red'</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">280.0</span><span class="token punctuation">}</span>Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'小小'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Green'</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">300.0</span><span class="token punctuation">}</span>Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'大牛'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Red'</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">320.0</span><span class="token punctuation">}</span>Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'冯心'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Yello'</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">470.0</span><span class="token punctuation">}</span></code></pre><p><strong>注意：</strong>Apple.compareByWeight是方法的调用，而Apple::compareByWeight方法引用，这两者完全不是一回事。</p><p><strong>（2）实例方法引用</strong></p><p>这个compareByWeight是一个实例方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppleComparator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareByWeight</span><span class="token punctuation">(</span>Apple a1<span class="token punctuation">,</span> Apple a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> diff <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> a2<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面的例子通过实例对象的方法引用 comparator::compareByWeight 来代替lambda表达式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Apple apple1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"红富士"</span><span class="token punctuation">,</span> <span class="token string">"Red"</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Apple apple2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"冯心"</span><span class="token punctuation">,</span> <span class="token string">"Yello"</span><span class="token punctuation">,</span> <span class="token number">470</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Apple apple3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">,</span> <span class="token string">"Red"</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Apple apple4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"小小"</span><span class="token punctuation">,</span> <span class="token string">"Green"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Apple<span class="token operator">></span> appleList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>apple1<span class="token punctuation">,</span> apple2<span class="token punctuation">,</span> apple3<span class="token punctuation">,</span> apple4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//lambda 表达式形式</span>        <span class="token comment" spellcheck="true">//appleList.sort((Apple a1, Apple a2) -> {</span>        <span class="token comment" spellcheck="true">//    return new Double(a1.getWeight() - a2.getWeight()).intValue();</span>        <span class="token comment" spellcheck="true">//});</span>        <span class="token comment" spellcheck="true">//实例方法引用</span>        AppleComparator comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppleComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appleList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token operator">:</span><span class="token operator">:</span>compareByWeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        appleList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>apple <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'红富士'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Red'</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">280.0</span><span class="token punctuation">}</span>Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'小小'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Green'</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">300.0</span><span class="token punctuation">}</span>Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'哈哈'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Red'</span><span class="token punctuation">,</span>   weight<span class="token operator">=</span><span class="token number">320.0</span><span class="token punctuation">}</span>Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'冯心'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Yello'</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">470.0</span><span class="token punctuation">}</span></code></pre><p>通过上面两个例子可以看到，静态方法引用和实例方法引用都是比较好理解的。</p><p><strong>（3）类方法引用</strong></p><p>一般来说，同类型对象的比较，应该当前调用方法的对象与另外一个对象进行比较，好的设计应该像下面： </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String category<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Apple</span><span class="token punctuation">(</span>String category<span class="token punctuation">,</span> String color<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> category<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这里和上面静态方式唯一区别就是这个参数就一个，需要实例对象调这个方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareByWeight</span><span class="token punctuation">(</span>Apple other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> diff <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> other<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//getter setter toString</span><span class="token punctuation">}</span></code></pre><p>  还是之前List排序的例子，看看使用类方法引用如何写：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Apple apple1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"红富士"</span><span class="token punctuation">,</span> <span class="token string">"Red"</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Apple apple2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"黄元帅"</span><span class="token punctuation">,</span> <span class="token string">"Yello"</span><span class="token punctuation">,</span> <span class="token number">470</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Apple apple3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"红将军"</span><span class="token punctuation">,</span> <span class="token string">"Red"</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Apple apple4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">"国光"</span><span class="token punctuation">,</span> <span class="token string">"Green"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Apple<span class="token operator">></span> appleList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>apple1<span class="token punctuation">,</span> apple2<span class="token punctuation">,</span> apple3<span class="token punctuation">,</span> apple4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//lambda 表达式形式</span>        <span class="token comment" spellcheck="true">//appleList.sort((Apple a1, Apple a2) -> {</span>        <span class="token comment" spellcheck="true">//    return new Double(a1.getWeight() - a2.getWeight()).intValue();</span>        <span class="token comment" spellcheck="true">//});</span>        <span class="token comment" spellcheck="true">//这里是类方法引用</span>        appleList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>Apple<span class="token operator">:</span><span class="token operator">:</span>compareByWeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        appleList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>apple <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'红富士'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Red'</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">280.0</span><span class="token punctuation">}</span>Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'国光'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Green'</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">300.0</span><span class="token punctuation">}</span>Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'红将军'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Red'</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">320.0</span><span class="token punctuation">}</span>Apple<span class="token punctuation">{</span>category<span class="token operator">=</span><span class="token string">'黄元帅'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'Yello'</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">470.0</span><span class="token punctuation">}</span></code></pre><p>   这里使用的是：类名::实例方法名。首先要说明的是，方法引用不是方法调用。compareByWeight一定是某个实例调用的，就是lambda表达式的第一个参数，然后lambda表达式剩下的参数作为 compareByWeight的参数，这样compareByWeight正好符合lambda表达式的定义。</p><p>或者也可以这样理解：</p><p>(Apple a1, Apple a2) -&gt; { return new Double(a1.getWeight() - a2.getWeight()).intValue(); }</p><p>int compareByWeight(Apple other) 需要当前对象调用，然后与另外一个对象比较，并且返回一个int值。可以理解为lambda表达式的第一个参数 a1 赋值给当前对象， 然后 a2 赋值给 other对象，然后返回int值。</p><p><strong>（4）构造方法引用</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructionMethodTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getString</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>String<span class="token operator">></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConstructionMethodTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConstructionMethodTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//lambda表达式形式</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造方法引用形式</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>getString 方法接收一个Supplier类型的参数，Supplier 不接收参数，返回一个String。lambda表达式应该这样写：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>替换成方法引用的形式如下： 实际上调用的是String 无参构造方法。</p><pre class=" language-java"><code class="language-java">String<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span></code></pre><h4 id="注意，Comparator不是函数式接口"><a href="#注意，Comparator不是函数式接口" class="headerlink" title="注意，Comparator不是函数式接口"></a>注意，Comparator不是函数式接口</h4><p>因为，在注解@FuctionalInterface的javadoc中如下说明：</p><blockquote><p>An informative annotation type used to indicate that an interface type declaration is intended<br> to be a functional interfaceas defined by the Java Language Specification.<br>Conceptually, a functional interface has exactly one abstract method.<br>Since default methods have an implementation, they are not abstract.<br>If an interface declares an abstract method overriding one of the public methods ofjava.lang.Object,<br>that also does not count toward the interface’s abstract method count since any implementation of the interface<br>will have an implementation fromjava.lang.Objector elsewhere.</p></blockquote><p>从中我们可以得知函数式接口的几点特征：</p><ul><li>函数式接口只有一个抽象方法</li><li>default方法某默认实现，不属于抽象方法</li><li>接口重写了Object的公共方法也不算入内</li></ul><p>所以，Comparator虽然有两个抽象方法：</p><ul><li>int compare(T o1, T o2);</li><li>boolean equals(Object obj);</li></ul><p>其中 equals为Object的方法，不算入内，所以Comparator可以作为函数式接口。</p><h4 id="另，思考1"><a href="#另，思考1" class="headerlink" title="另，思考1"></a>另，思考1</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">qoq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"xuxiaoxiao"</span><span class="token punctuation">,</span> <span class="token string">"xudada"</span><span class="token punctuation">,</span> <span class="token string">"xuzhongzhong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//之前考虑，foreach后跟Consumer类的实现，</span>    <span class="token comment" spellcheck="true">//而Consumer只有一个void accept(T t)方法需要实现，所以考虑能否通过“类方法引用”实现</span>    <span class="token comment" spellcheck="true">//即下面的pop()方法不需要参数，该方法属于实例，需要实例进行调用，所以当用lambda时，</span>    <span class="token comment" spellcheck="true">//实例对象为第一个lambda参数，即t。</span>    <span class="token comment" spellcheck="true">//但是，报错！！！</span>    <span class="token comment" spellcheck="true">//考虑其原因，Consumer&lt;T> 此处的T需要为String或String的超类</span>    <span class="token comment" spellcheck="true">//（尝试用匿名内部类的写法，把T写成String或Object，发现不报错！）</span>    <span class="token comment" spellcheck="true">//即，accept(T t)中的 t 应该为 String类，或者Object...</span>    <span class="token comment" spellcheck="true">//若用“类方法引用”，将实例对象做第一个参数，则该实例应为 String 或 Object 的实例。故出错</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误写法</span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------pop-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"pop"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="思考2"><a href="#思考2" class="headerlink" title="思考2"></a>思考2</h4><p>对于函数式接口，在用Lambda实现时，如果需要被实现的方法，返回值为void，则Lambda引用的方法返回值随意，只相当于调用了那个方法，具体return的值，并没有接收者（参照某查询方法的返回值为list，但是没有接它），所以不影响；但是，如果需要被实现的方法，有返回值，则则Lambda引用的方法返回值必须一致！</p><h4 id="思考3"><a href="#思考3" class="headerlink" title="思考3"></a>思考3</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Department d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Department d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Department d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Department d4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d1<span class="token punctuation">.</span><span class="token function">setDeptName</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d2<span class="token punctuation">.</span><span class="token function">setDeptName</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d3<span class="token punctuation">.</span><span class="token function">setDeptName</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d4<span class="token punctuation">.</span><span class="token function">setDeptName</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Department<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">,</span>d4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1 正确</span>    list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Department<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Department o1<span class="token punctuation">,</span> Department o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2 正确</span>    list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Department o1<span class="token punctuation">,</span>Department o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3 正确</span>    list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4 在Department类中有方法a正确，b正确，c错误，d正确</span>    list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>Department<span class="token operator">:</span><span class="token operator">:</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span> <span class="token function">a</span><span class="token punctuation">(</span>Object department1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span> <span class="token function">b</span><span class="token punctuation">(</span>Department department1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span> <span class="token function">c</span><span class="token punctuation">(</span>Department department1<span class="token punctuation">,</span>Department department2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span> <span class="token function">d</span><span class="token punctuation">(</span> Department department1<span class="token punctuation">,</span>Department department2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试基础（转理）</title>
      <link href="/2020/01/31/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/01/31/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># Java面试基础<h2 id="10-重载和重写的区别"><a href="#10-重载和重写的区别" class="headerlink" title="10. 重载和重写的区别"></a>10. 重载和重写的区别</h2><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</p><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写,发生在子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。另外，如果父类方法访问修饰符为 private 则子类就不能重写该方法。<strong>也就是说方法提供的行为改变，而方法的外貌并没有改变。</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 子类返回值范围小于等于父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Small</span> <span class="token keyword">extends</span> <span class="token class-name">Big</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Father <span class="token function">doByBig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~~~~~~~~~~ Small print +++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="11-Java-面向对象编程三大特性-封装-继承-多态"><a href="#11-Java-面向对象编程三大特性-封装-继承-多态" class="headerlink" title="11. Java 面向对象编程三大特性: 封装 继承 多态"></a>11. Java 面向对象编程三大特性: 封装 继承 多态</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p><p><strong>关于继承如下 3 点请记住：</strong></p><ol><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。（以后介绍）。</li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><h2 id="12-String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#12-String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="12. String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?"></a>12. String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</h2><p><strong>可变性</strong></p><p>简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，<code>private　final　char　value[]</code>，所以 String 对象是不可变的。而StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 final 关键字修饰，所以这两种对象都是可变的。</p><p>StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的，大家可以自行查阅源码。</p><p>AbstractStringBuilder.java</p><pre><code>abstract class AbstractStringBuilder implements Appendable, CharSequence {    char[] value;    int count;    AbstractStringBuilder() {    }    AbstractStringBuilder(int capacity) {        value = new char[capacity];    }</code></pre><p><strong>线程安全性</strong></p><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。<strong>StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</strong>　</p><p><strong>性能</strong></p><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>对于三者使用的总结：</strong></p><ol><li>操作少量的数据: 适用String</li><li>单线程操作字符串缓冲区下操作大量数据: 适用StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据: 适用StringBuffer</li></ol><h2 id="14-在一个静态方法内调用一个非静态成员为什么是非法的"><a href="#14-在一个静态方法内调用一个非静态成员为什么是非法的" class="headerlink" title="14. 在一个静态方法内调用一个非静态成员为什么是非法的?"></a>14. 在一个静态方法内调用一个非静态成员为什么是非法的?</h2><p>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><p><strong>非静态的方法可以调用静态的方法，但是静态的方法不可以调用非静态的方法。</strong></p><p>类的静态成员(变量和方法)属于类本身，在类加载的时候就会分配内存，可以通过类名直接去访问；非静态成员（变量和方法）属于类的对象，所以只有在类的对象产生（创建类的实例）时才会分配内存，然后通过类的对象（实例）去访问。</p><p>在一个类的静态成员中去访问其非静态成员之所以会出错是因为在类的非静态成员不存在的时候类的静态成员就已经存在了，访问一个内存中不存在的东西当然会出错</p><h2 id="18-成员变量与局部变量的区别有哪些？"><a href="#18-成员变量与局部变量的区别有哪些？" class="headerlink" title="18. 成员变量与局部变量的区别有哪些？"></a>18. 成员变量与局部变量的区别有哪些？</h2><ol><li><p>从语法形式上看:成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</p></li><li><p><strong>从变量在内存中的存储方式来看:如果成员变量是使用<code>static</code>修饰的，那么这个成员变量是属于类的，如果没有使用<code>static</code>修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</strong></p></li><li><p>从变量在内存中的生存时间上看:成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</p></li><li><p><strong>成员变量如果没有被赋初值:则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</strong></p></li></ol><h2 id="19-创建一个对象用什么运算符-对象实体与对象引用区别"><a href="#19-创建一个对象用什么运算符-对象实体与对象引用区别" class="headerlink" title="19. 创建一个对象用什么运算符?对象实体与对象引用区别?"></a>19. 创建一个对象用什么运算符?对象实体与对象引用区别?</h2><p>new运算符，new创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向0个或1个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有n个引用指向它（可以用n条绳子系住一个气球）。</p><h2 id="24-对象的相等与指向他们的引用相等-两者有什么不同"><a href="#24-对象的相等与指向他们的引用相等-两者有什么不同" class="headerlink" title="24. 对象的相等与指向他们的引用相等,两者有什么不同?"></a>24. 对象的相等与指向他们的引用相等,两者有什么不同?</h2><p>对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。</p><h2 id="26-与-equals-重要"><a href="#26-与-equals-重要" class="headerlink" title="26. == 与 equals(重要)"></a>26. == 与 equals(重要)</h2><p><strong>==</strong> : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。</p><p><strong>equals()</strong> : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li><li>情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li></ul><p><strong>举个例子：</strong></p><pre><code>public class test1 {    public static void main(String[] args) {        String a = new String(&quot;ab&quot;); // a 为一个引用        String b = new String(&quot;ab&quot;); // b为另一个引用,对象的内容一样        String aa = &quot;ab&quot;; // 放在常量池中        String bb = &quot;ab&quot;; // 从常量池中查找        if (aa == bb) // true            System.out.println(&quot;aa==bb&quot;);        if (a == b) // false，非同一对象            System.out.println(&quot;a==b&quot;);        if (a.equals(b)) // true            System.out.println(&quot;aEQb&quot;);        if (42 == 42.0) { // true            System.out.println(&quot;true&quot;);        }    }}</code></pre><p><strong>说明：</strong></p><ul><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li></ul><h2 id="27-hashCode-与-equals-重要"><a href="#27-hashCode-与-equals-重要" class="headerlink" title="27. hashCode 与 equals (重要)"></a>27. hashCode 与 equals (重要)</h2><p>面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写equals时必须重写hashCode方法？”</p><h3 id="hashCode（）介绍"><a href="#hashCode（）介绍" class="headerlink" title="hashCode（）介绍"></a>hashCode（）介绍</h3><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。</p><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><h3 id="为什么要有-hashCode"><a href="#为什么要有-hashCode" class="headerlink" title="为什么要有 hashCode"></a>为什么要有 hashCode</h3><p><strong>我们先以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：</strong> 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 <code>equals()</code>方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的Java启蒙书《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p>通过我们可以看出：<code>hashCode()</code> 的作用就是<strong>获取哈希码</strong>，也称为散列码；它实际上是返回一个int整数。这个<strong>哈希码的作用</strong>是确定该对象在哈希表中的索引位置。<strong><code>hashCode()</code>在散列表中才有用，在其它情况下没用</strong>。在散列表中hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p><h3 id="hashCode（）与equals（）的相关规定"><a href="#hashCode（）与equals（）的相关规定" class="headerlink" title="hashCode（）与equals（）的相关规定"></a>hashCode（）与equals（）的相关规定</h3><ol><li>如果两个对象相等，则hashcode一定也是相同的</li><li>两个对象相等,对两个对象分别调用equals方法都返回true</li><li>两个对象有相同的hashcode值，它们也不一定是相等的</li><li><strong>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</strong></li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol><p>推荐阅读：<a href="https://www.cnblogs.com/skywang12345/p/3324958.html" target="_blank" rel="noopener">Java hashCode() 和 equals()的若干问题解答</a></p><h2 id="32-Java-中的异常处理"><a href="#32-Java-中的异常处理" class="headerlink" title="32 Java 中的异常处理"></a>32 Java 中的异常处理</h2><h3 id="Java异常类层次结构图"><a href="#Java异常类层次结构图" class="headerlink" title="Java异常类层次结构图"></a>Java异常类层次结构图</h3><p>在 Java 中，所有的异常都有一个共同的祖先java.lang包中的 <strong>Throwable类</strong>。Throwable： 有两个重要的子类：<strong>Exception（异常）</strong> 和 <strong>Error（错误）</strong> ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p><p><strong>Error（错误）:是程序无法处理的错误</strong>，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。</p><p>这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过Error的子类描述。</p><p><strong>Exception（异常）:是程序本身可以处理的异常</strong>。Exception 类有一个重要的子类 <strong>RuntimeException</strong>。RuntimeException 异常由Java虚拟机抛出。<strong>NullPointerException</strong>（要访问的变量没有引用任何对象时，抛出该异常）、<strong>ArithmeticException</strong>（算术运算异常，一个整数除以0时，抛出该异常）和 <strong>ArrayIndexOutOfBoundsException</strong> （下标越界异常）。</p><p><strong>注意：异常和错误的区别：异常能被程序本身处理，错误是无法处理。</strong></p><h3 id="Throwable类常用方法"><a href="#Throwable类常用方法" class="headerlink" title="Throwable类常用方法"></a>Throwable类常用方法</h3><ul><li><strong>public string getMessage()</strong>:返回异常发生时的简要描述</li><li><strong>public string toString()</strong>:返回异常发生时的详细信息</li><li><strong>public string getLocalizedMessage()</strong>:返回异常对象的本地化信息。使用Throwable的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与getMessage（）返回的结果相同</li><li><strong>public void printStackTrace()</strong>:在控制台上打印Throwable对象封装的异常信息</li></ul><h3 id="异常处理总结"><a href="#异常处理总结" class="headerlink" title="异常处理总结"></a>异常处理总结</h3><ul><li><strong>try 块：</strong> 用于捕获异常。其后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。</li><li><strong>catch 块：</strong> 用于处理try捕获到的异常。</li><li><strong>finally 块：</strong> 无论是否捕获或处理异常，finally块里的语句都会被执行。当在try块或catch块中遇到return 语句时，finally语句块将在方法返回之前被执行。</li></ul><p><strong>在以下4种特殊情况下，finally块不会被执行：</strong></p><ol><li>在finally语句块第一行发生了异常。 因为在其他行，finally块还是会得到执行</li><li>在前面的代码中用了System.exit(int)已退出程序。 exit是带参函数 ；若该语句在异常语句之后，finally会执行</li><li>程序所在的线程死亡。</li><li>关闭CPU。</li></ol><p>下面这部分内容来自issue:<a href="https://github.com/Snailclimb/JavaGuide/issues/190。" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/issues/190。</a></p><p><strong>注意：</strong> 当try语句和finally语句中都有return语句时，在方法返回之前，finally语句的内容将被执行，并且finally语句的返回值将会覆盖原始的返回值。如下：</p><pre><code>    public static int f(int value) {        try {            return value * value;        } finally {            if (value == 2) {                return 0;            }        }    }</code></pre><p>如果调用 <code>f(2)</code>，返回值将是0，因为finally语句的返回值覆盖了try语句块的返回值。</p><h2 id="35-Java-中-IO-流"><a href="#35-Java-中-IO-流" class="headerlink" title="35 Java 中 IO 流"></a>35 Java 中 IO 流</h2><h3 id="Java-中-IO-流分为几种"><a href="#Java-中-IO-流分为几种" class="headerlink" title="Java 中 IO 流分为几种?"></a>Java 中 IO 流分为几种?</h3><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ul><p>Java Io流共涉及40多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0流的40多个类都是从如下4个抽象类基类中派生出来的。</p><ul><li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><p>按操作方式分类结构图：</p><p><a href="https://camo.githubusercontent.com/639ec442b39898de071c3e4fd098215fb48f11e9/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f494f2d2545362539332538442545342542442539432545362539362542392545352542432538462545352538382538362545372542312542422e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/639ec442b39898de071c3e4fd098215fb48f11e9/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f494f2d2545362539332538442545342542442539432545362539362542392545352542432538462545352538382538362545372542312542422e706e67" alt="IO-操作方式分类"></a></p><p>按操作对象分类结构图：</p><p><a href="https://camo.githubusercontent.com/4a44e49ab13eacac26cbb0e481db73d6d11181b7/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f494f2d2545362539332538442545342542442539432545352541462542392545382542312541312545352538382538362545372542312542422e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/4a44e49ab13eacac26cbb0e481db73d6d11181b7/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f494f2d2545362539332538442545342542442539432545352541462542392545382542312541312545352538382538362545372542312542422e706e67" alt="IO-操作对象分类"></a></p><h3 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流,为什么还要有字符流?"></a>既然有了字节流,为什么还要有字符流?</h3><p>问题本质想问：<strong>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</strong></p><p>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h3 id="BIO-NIO-AIO-有什么区别"><a href="#BIO-NIO-AIO-有什么区别" class="headerlink" title="BIO,NIO,AIO 有什么区别?"></a>BIO,NIO,AIO 有什么区别?</h3><ul><li><strong>BIO (Blocking I/O):</strong> 同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</li><li><strong>NIO (New I/O):</strong> NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 <code>Socket</code> 和 <code>ServerSocket</code> 相对应的 <code>SocketChannel</code> 和 <code>ServerSocketChannel</code> 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发</li><li><strong>AIO (Asynchronous I/O):</strong> AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。</li></ul><h2 id="36-常见关键字总结-static-final-this-super"><a href="#36-常见关键字总结-static-final-this-super" class="headerlink" title="36. 常见关键字总结:static,final,this,super"></a>36. 常见关键字总结:static,final,this,super</h2><p><strong>使用 this 和 super 要注意的问题：</strong></p><ul><li>在构造器中使用 <code>super（）</code> 调用父类中的其他构造方法时，该语句必须处于构造器的首行，否则编译器会报错。另外，this 调用本类中的其他构造方法时，也要放在首行。</li><li>this、super不能用在static方法中。</li></ul><p><strong>简单解释一下：</strong></p><p>被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享。而 this 代表对本类对象的引用，指向本类对象；而 super 代表对父类对象的引用，指向父类对象；所以， <strong>this和super是属于对象范畴的东西，而静态方法是属于类范畴的东西</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java静态代码块、构造代码块、构造函数、普通代码块</title>
      <link href="/2020/01/30/Java%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E6%9E%84%E9%80%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E6%99%AE%E9%80%9A%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
      <url>/2020/01/30/Java%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E6%9E%84%E9%80%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E6%99%AE%E9%80%9A%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># Java静态代码块、构造代码块、构造函数、普通代码块<blockquote><p>转载自作者：<a href="http://www.cnblogs.com/ysocean/" target="_blank" rel="noopener">YSOcean</a></p><p>出处：<a href="http://www.cnblogs.com/ysocean/" target="_blank" rel="noopener">http://www.cnblogs.com/ysocean/</a></p></blockquote><h3 id="1、静态代码块"><a href="#1、静态代码块" class="headerlink" title="1、静态代码块"></a>1、静态代码块</h3><h4 id="①、格式"><a href="#①、格式" class="headerlink" title="　　①、格式"></a>　　①、格式</h4><p>　　在java类中（方法中不能存在静态代码块）使用static关键字和{}声明的代码块：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeBlock</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h4 id="②、执行时机"><a href="#②、执行时机" class="headerlink" title="　　②、执行时机"></a>　　②、执行时机</h4><p>　　静态代码块在类被加载的时候就运行了，而且只运行一次，并且优先于各种代码块以及构造函数。如果一个类中有多个静态代码块，会按照书写顺序依次执行。后面在比较的时候会通过具体实例来证明。</p><h4 id="③、静态代码块的作用"><a href="#③、静态代码块的作用" class="headerlink" title="　　③、静态代码块的作用"></a>　　③、静态代码块的作用</h4><p>　　一般情况下，如果有些代码需要在项目启动的时候就执行，这时候就需要静态代码块。比如一个项目启动需要加载的很多配置文件等资源，我们就可以都放入静态代码块中。</p><h4 id="④、静态代码块不能存在任何方法体中"><a href="#④、静态代码块不能存在任何方法体中" class="headerlink" title="　　④、静态代码块不能存在任何方法体中"></a>　　④、静态代码块不能存在任何方法体中</h4><p>　　这个应该很好理解，首先我们要明确静态代码块是在类加载的时候就要运行了。我们分情况讨论：</p><p>　　对于普通方法，由于普通方法是通过加载类，然后new出实例化对象，通过对象才能运行这个方法，而静态代码块只需要加载类之后就能运行了。</p><p>　　对于静态方法，在类加载的时候，静态方法也已经加载了，但是我们必须要通过类名或者对象名才能访问，也就是说相比于静态代码块，静态代码块是主动运行的，而静态方法是被动运行的。</p><p>　　不管是哪种方法，我们需要明确静态代码块的存在在类加载的时候就自动运行了，而放在不管是普通方法还是静态方法中，都是不能自动运行的。</p><h4 id="⑤、静态代码块不能访问普通变量"><a href="#⑤、静态代码块不能访问普通变量" class="headerlink" title="　　⑤、静态代码块不能访问普通变量"></a>　　⑤、静态代码块不能访问普通变量</h4><p>　　这个理解思维同上，普通变量只能通过对象来调用，是不能放在静态代码块中的。</p><h3 id="2、构造代码块"><a href="#2、构造代码块" class="headerlink" title="2、构造代码块"></a>2、构造代码块</h3><h4 id="①、格式-1"><a href="#①、格式-1" class="headerlink" title="　　①、格式"></a>　　①、格式</h4><p>　　在java类中使用{}声明的代码块（和静态代码块的区别是少了static关键字）:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeBlock</span> <span class="token punctuation">{</span>          <span class="token keyword">static</span>  <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"静态代码块"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"构造代码块"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h4 id="②、执行时机-1"><a href="#②、执行时机-1" class="headerlink" title="　　②、执行时机"></a>　　②、执行时机</h4><p>　　构造代码块在创建对象时被调用，每次创建对象都会调用一次，但是优先于构造函数执行。需要注意的是，听名字我们就知道，构造代码块不是优先于构造函数执行，而是依托于构造函数，也就是说，如果你不实例化对象，构造代码块是不会执行的。怎么理解呢？我们看看下面这段代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeBlock</span> <span class="token punctuation">{</span>          <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"构造代码块"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>               <span class="token keyword">public</span> <span class="token function">CodeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"无参构造函数"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token keyword">public</span> <span class="token function">CodeBlock</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"有参构造函数"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>　　我们反编译生成的class文件：</p><p>　　<img src="https://images2017.cnblogs.com/blog/1120165/201801/1120165-20180104181114674-1561697917.png" alt="img"></p><p>　　如果存在多个构造代码块，则执行顺序按照书写顺序依次执行。</p><h4 id="③、构造代码块的作用"><a href="#③、构造代码块的作用" class="headerlink" title="　　③、构造代码块的作用"></a>　　③、构造代码块的作用</h4><p> 　和构造函数的作用类似，都能对对象进行初始化，并且只要创建一个对象，构造代码块都会执行一次。但是反过来，构造函数则不一定每个对象建立时都执行（多个构造函数情况下，建立对象时传入的参数不同则初始化使用对应的构造函数）。</p><p>　　利用每次创建对象的时候都会提前调用一次构造代码块特性，我们可以做诸如统计创建对象的次数等功能。</p><h3 id="3、构造函数"><a href="#3、构造函数" class="headerlink" title="3、构造函数"></a>3、构造函数</h3><p>　　1.构造函数的命名必须和类名完全相同。在java中普通函数可以和构造函数同名，但是必须带有返回值；</p><p>　　2.构造函数的功能主要用于在类的对象创建时定义初始化的状态。它没有返回值，也不能用void来修饰。这就保证了它不仅什么也不用自动返回，而且根本不能有任何选择。而其他方法都有返回值，即使是void返回值。尽管方法体本身不会自动返回什么，但仍然可以让它返回一些东西，而这些东西可能是不安全的；</p><p>　　3.构造函数不能被直接调用，必须通过new运算符在创建对象时才会自动调用；而一般的方法是在程序执行到它的时候被调用的；</p><p>　　4.当定义一个类的时候，通常情况下都会显示该类的构造函数，并在函数中指定初始化的工作也可省略，不过Java编译器会提供一个默认的构造函数.此默认构造函数是不带参数的。而一般的方法不存在这一特点；</p><h3 id="4、普通代码块"><a href="#4、普通代码块" class="headerlink" title="4、普通代码块"></a>4、普通代码块</h3><p>　　普通代码块和构造代码块的区别是，构造代码块是在类中定义的，而普通代码块是在方法体中定义的。且普通代码块的执行顺序和书写顺序一致。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"普通代码块"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="5、执行顺序"><a href="#5、执行顺序" class="headerlink" title="5、执行顺序"></a>5、执行顺序</h3><ul><li>　<strong>静态代码块&gt;构造代码块&gt;构造函数&gt;普通代码块</strong>　</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeBlock</span> <span class="token punctuation">{</span>          <span class="token keyword">static</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"静态代码块"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"构造代码块"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CodeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"无参构造函数"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"普通代码块"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"执行了main方法"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">new</span>   <span class="token class-name">CodeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"---------------"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span>   <span class="token class-name">CodeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>　　<strong>反编译生成的class文件：</strong></p><p>　　<img src="https://images2017.cnblogs.com/blog/1120165/201801/1120165-20180104191946799-1728553747.png" alt="img"></p><p>　　<strong>执行结果：</strong></p><p> 　<img src="https://images2017.cnblogs.com/blog/1120165/201801/1120165-20180104192057253-11181881.png" alt="img"></p><p>　　我们创建了两个匿名对象，但是静态代码块只是调用了一次。</p><h3 id="6、父类和子类执行顺序"><a href="#6、父类和子类执行顺序" class="headerlink" title="6、父类和子类执行顺序"></a>6、父类和子类执行顺序</h3><p>　　对象的初始化顺序：</p><p>　　首先执行父类静态的内容，父类静态的内容执行完毕后，接着去执行子类的静态的内容，当子类的静态内容执行完毕之后，再去看父类有没有构造代码块，如果有就执行父类的构造代码块，父类的构造代码块执行完毕，接着执行父类的构造方法；父类的构造方法执行完毕之后，它接着去看子类有没有构造代码块，如果有就执行子类的构造代码块。子类的构造代码块执行完毕再去执行子类的构造方法。</p><p>　　总之一句话，静态代码块内容先执行，接着执行父类构造代码块和构造方法，然后执行子类构造代码块和构造方法。</p><p>　　父类：SuperClass.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ys<span class="token punctuation">.</span>extend<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"父类静态代码块"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>         <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"父类构造代码块"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">public</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"父类构造函数"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>　　子类：SubClass.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ys<span class="token punctuation">.</span>extend<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>          <span class="token keyword">static</span>  <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"子类静态代码块"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>           <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"子类构造代码块"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token keyword">public</span>   <span class="token function">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">"子类构造函数"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span></code></pre><p>　　测试：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          SubClass sb <span class="token operator">=</span>   <span class="token keyword">new</span>   <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          SubClass sb1 <span class="token operator">=</span>   <span class="token keyword">new</span>   <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>　　打印结果：</p><p>　　<img src="https://images2017.cnblogs.com/blog/1120165/201801/1120165-20180104193548237-277863554.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 实战</title>
      <link href="/2020/01/28/ElasticSearch%20%E5%AE%9E%E6%88%98/"/>
      <url>/2020/01/28/ElasticSearch%20%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># ElasticSearch 实战<p>首先，要先安装好ElasticSearch、IK分词器、Logstash，最好有一个ES的可视化插件head。</p><p>准备工作，我们是要依靠ES进行搜索，那么我们就需要建立索引库，就相当于把我们想被检索的那些东西统统的扔到这个库里，这个库和我们的Mysql数据库不一样，索引库里的东西都可以被ES检索！</p><p>所以我们的思路是，把Mysql的东西导入到ES的索引库，这里就要借助Logstash。</p><h2 id="搭建ES环境"><a href="#搭建ES环境" class="headerlink" title="搭建ES环境"></a>搭建ES环境</h2><ol><li><p>建立一个新的ES，可以将旧ES的配置文件改改，然后把data\nodes目录删掉。</p></li><li><p>创建索引库，名字叫xc_course,分片数量1，副本0.</p></li><li><p>创建映射，可以用postman跑：localhost:9200/xc_course/doc/_mapping</p></li></ol><p>映射文件如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"properties"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"description"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>               <span class="token property">"search_analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"end_time"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"format"</span> <span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"date"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"expires"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"format"</span> <span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"date"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"grade"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"id"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"mt"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>               <span class="token property">"search_analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"pic"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"price"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"float"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"price_old"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"float"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"pub_time"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"format"</span> <span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"date"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"qq"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"st"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"start_time"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"format"</span> <span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"date"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"studymodel"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"teachmode"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"teachplan"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>               <span class="token property">"search_analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"users"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"valid"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Logstash创建索引"><a href="#Logstash创建索引" class="headerlink" title="Logstash创建索引"></a>Logstash创建索引</h2><p>Logstash的一些用法，这里简单说明一下：Logstash是ES下的一款开源软件，可以从多个来源采集数据、转换数据，然后将数据发送到ES中创建索引。</p><ol><li><p>下载Logstash，和ES版本要一致。<a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/downloads/logstash</a></p></li><li><p>安装logstash-input-jdbc,因为它是ruby开发的，所以也要装ruby。</p><p>ruby安装成功可以用cmd下 ruby -v 测测。</p><p>而Logstash5.x自带jdbc，6.x没有，所以手动安装吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-4125b61d00fbd3fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>创建logstash的模板文件，Logstash的工作是从MySQL中读取数据，向ES中创建索引，这里需要提前创建mapping的模板文件以便logstash 使用。在logstach的conﬁg目录创建xc_course_template.json，内容如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"mappings"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"doc"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"properties"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"charge"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"description"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>               <span class="token property">"search_analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"end_time"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"format"</span> <span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"date"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"expires"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"format"</span> <span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"date"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"grade"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"id"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"mt"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>               <span class="token property">"search_analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"pic"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"price"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"float"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"price_old"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"float"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"pub_time"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"format"</span> <span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"date"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"qq"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"st"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"start_time"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"format"</span> <span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"date"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"studymodel"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"teachmode"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"teachplan"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>               <span class="token property">"search_analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"users"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"index"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"valid"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"template"</span> <span class="token operator">:</span> <span class="token string">"xc_course"</span><span class="token punctuation">}</span></code></pre></li><li><p>配置mysql.conf</p><p>在logstash的conﬁg目录下配置mysql.conf文件供logstash使用，logstash会根据mysql.conf文件的配置的地址从 MySQL中读取数据向ES中写入索引.参考 <a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html</a> 配置输入数据源和输出数据源。</p><pre class=" language-json"><code class="language-json">input <span class="token punctuation">{</span>  stdin <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  jdbc <span class="token punctuation">{</span>  jdbc_connection_string => <span class="token string">"jdbc:mysql://localhost:3306/xc_course?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC"</span>  # the user we wish to excute our statement as  jdbc_user => <span class="token string">"root"</span>  jdbc_password => <span class="token string">"123456"</span>  # the path to our downloaded jdbc driver    jdbc_driver_library => <span class="token string">"D:/xx/lesson/mysql-connector-java-5.1.7.jar"</span>  # the name of the driver class for mysql  jdbc_driver_class => <span class="token string">"com.mysql.jdbc.Driver"</span>  jdbc_paging_enabled => <span class="token string">"true"</span>  jdbc_page_size => <span class="token string">"50000"</span>  #要执行的sql文件  #statement_filepath => <span class="token string">"/conf/course.sql"</span>  statement => <span class="token string">"select * from course_pub where timestamp > date_add(:sql_last_value,INTERVAL 8 HOUR)"</span>  #定时配置  schedule => <span class="token string">"* * * * *"</span>  record_last_run => <span class="token boolean">true</span>  last_run_metadata_path => <span class="token string">"D:/ElasticSearch/logstash-6.2.1/config/logstash_metadata"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>   output {<br>     elasticsearch {<br>     #ES的ip地址和端口<br>     hosts =&gt; “localhost:9200”<br>     #hosts =&gt; [“localhost:9200”,”localhost:9202”,”localhost:9203”]<br>     #ES索引库名称<br>     index =&gt; “xc_course”<br>     document_id =&gt; “%{id}”<br>     document_type =&gt; “doc”<br>     template =&gt;”D:/ElasticSearch/logstash-6.2.1/config/xc_course_template.json”<br>     template_name =&gt;”xc_course”<br>     template_overwrite =&gt;”true”<br>     }<br>     stdout {<br>    #日志输出<br>     codec =&gt; json_lines<br>     }<br>   }</p><pre><code>   **说明**：   1、ES采用UTC时区问题 ES采用UTC 时区，比北京时间早8小时，所以ES读取数据时让最后更新时间加8小时 where timestamp &gt; date_add(:sql_last_value,INTERVAL 8 HOUR)   2、logstash每个执行完成会在 D:/ElasticSearch/logstash-6.2.1/conﬁg/logstash_metadata 记录执行时间，下次以此时间为基准进行增量同步数据到索引库。5. 测试logstash:在bin文件夹下，   ```java   .\logstash.bat -f ..\config\mysql.conf</code></pre><p>   修改course_pub中的数据，并且修改timestamp为当前时间，观察Logstash日志是否读取到要索引的数据。</p><p>   <img src="https://upload-images.jianshu.io/upload_images/19860184-f6bb5250ca6c8c5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="logstash成功导入到ES索引"></p><p>   <strong>注意</strong>：这里需要注意几个问题，mysql.conf 文件中的账户密码要有双引号！如果拿到了数据，却没有在ES添加，应该是jdbc安装问题！所有的配置路径不要写错！如果重新安装了jdbc还不行，就去把索引删掉重新来一遍，就好使了（我就是…）</p><h2 id="ES搜索的业务开发"><a href="#ES搜索的业务开发" class="headerlink" title="ES搜索的业务开发"></a>ES搜索的业务开发</h2><p>yml配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>port<span class="token punctuation">:</span><span class="token number">40100</span><span class="token punctuation">}</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> xc<span class="token punctuation">-</span>search<span class="token punctuation">-</span>service<span class="token key atrule">xuecheng</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>    <span class="token key atrule">hostlist</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>eshostlist<span class="token punctuation">:</span>127.0.0.1<span class="token punctuation">:</span><span class="token number">9200</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 将要连接的ES端，多个结点中间用逗号分隔</span>    <span class="token key atrule">course</span><span class="token punctuation">:</span>      <span class="token key atrule">index</span><span class="token punctuation">:</span> xc_course <span class="token comment" spellcheck="true"># 索引的名称，类似于表名</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> doc <span class="token comment" spellcheck="true"># 类型，用处不大，但是要有。高级版本将会淘汰</span>      <span class="token key atrule">source_field</span><span class="token punctuation">:</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>grade<span class="token punctuation">,</span>mt<span class="token punctuation">,</span>st<span class="token punctuation">,</span>charge<span class="token punctuation">,</span>valid<span class="token punctuation">,</span>pic<span class="token punctuation">,</span>qq<span class="token punctuation">,</span>price<span class="token punctuation">,</span>price_old<span class="token punctuation">,</span>status<span class="token punctuation">,</span>studymodel<span class="token punctuation">,</span>teachmode<span class="token punctuation">,</span>expires<span class="token punctuation">,</span>pub_time<span class="token punctuation">,</span>start_time<span class="token punctuation">,</span>end_time <span class="token comment" spellcheck="true"># 需要展现的字段</span></code></pre><p>config配置：这里配置两个Client，我们用高级别的就好</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xuecheng<span class="token punctuation">.</span>search<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpHost<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestHighLevelClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author GuoTianChi * @version 1.0 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticsearchConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xuecheng.elasticsearch.hostlist}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String hostlist<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestHighLevelClient <span class="token function">restHighLevelClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//解析hostlist配置信息</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> hostlist<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建HttpHost数组，其中存放es主机和端口的配置信息</span>        HttpHost<span class="token punctuation">[</span><span class="token punctuation">]</span> httpHostArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">[</span>split<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>split<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String item <span class="token operator">=</span> split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            httpHostArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建RestHighLevelClient客户端</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>httpHostArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//项目主要使用RestHighLevelClient，对于低级的客户端暂时不用</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestClient <span class="token function">restClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//解析hostlist配置信息</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> hostlist<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建HttpHost数组，其中存放es主机和端口的配置信息</span>        HttpHost<span class="token punctuation">[</span><span class="token punctuation">]</span> httpHostArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">[</span>split<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>split<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String item <span class="token operator">=</span> split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            httpHostArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>httpHostArray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行搜索的逻辑代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xuecheng<span class="token punctuation">.</span>search<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xuecheng<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>course<span class="token punctuation">.</span>CoursePub<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xuecheng<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>search<span class="token punctuation">.</span>CourseSearchParam<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xuecheng<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>model<span class="token punctuation">.</span>response<span class="token punctuation">.</span>CommonCode<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xuecheng<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>model<span class="token punctuation">.</span>response<span class="token punctuation">.</span>QueryResponseResult<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xuecheng<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>model<span class="token punctuation">.</span>response<span class="token punctuation">.</span>QueryResult<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span>SearchRequest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>action<span class="token punctuation">.</span>search<span class="token punctuation">.</span>SearchResponse<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestHighLevelClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span>BoolQueryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span>MultiMatchQueryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryBuilders<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>SearchHit<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>SearchHits<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>SearchSourceBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EsCourseService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    RestHighLevelClient restHighLevelClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xuecheng.elasticsearch.course.index}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String es_index<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xuecheng.elasticsearch.course.type}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String es_type<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xuecheng.elasticsearch.course.source_field}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String source_field<span class="token punctuation">;</span>    <span class="token keyword">public</span> QueryResponseResult <span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> CourseSearchParam courseSearchParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需要返回的结果集</span>        QueryResult<span class="token operator">&lt;</span>CoursePub<span class="token operator">></span> queryResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果搜索参数不为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> courseSearchParam<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置索引</span>            SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>es_index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置类型</span>            searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>es_type<span class="token punctuation">)</span><span class="token punctuation">;</span>            SearchSourceBuilder searchSourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BoolQueryBuilder boolQueryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//source源字段过滤</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> source <span class="token operator">=</span> source_field<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            searchSourceBuilder<span class="token punctuation">.</span><span class="token function">fetchSource</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//关键字</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>courseSearchParam<span class="token punctuation">.</span><span class="token function">getKeyword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                String keyword <span class="token operator">=</span> courseSearchParam<span class="token punctuation">.</span><span class="token function">getKeyword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//匹配关键字</span>                MultiMatchQueryBuilder multiMatchQueryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">multiMatchQuery</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"teachplan"</span><span class="token punctuation">,</span><span class="token string">"description"</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//设置匹配占比</span>                        <span class="token punctuation">.</span><span class="token function">minimumShouldMatch</span><span class="token punctuation">(</span><span class="token string">"70%"</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//提升字段Boost值</span>                        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>multiMatchQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//过滤</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>courseSearchParam<span class="token punctuation">.</span><span class="token function">getMt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                boolQueryBuilder<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"mt"</span><span class="token punctuation">,</span>courseSearchParam<span class="token punctuation">.</span><span class="token function">getMt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>courseSearchParam<span class="token punctuation">.</span><span class="token function">getSt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                boolQueryBuilder<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"st"</span><span class="token punctuation">,</span>courseSearchParam<span class="token punctuation">.</span><span class="token function">getSt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>courseSearchParam<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                boolQueryBuilder<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"grade"</span><span class="token punctuation">,</span>courseSearchParam<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//布尔查询</span>            searchSourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//请求搜索</span>            searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>searchSourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            SearchResponse searchResponse <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                searchResponse <span class="token operator">=</span> restHighLevelClient<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QueryResponseResult</span><span class="token punctuation">(</span>CommonCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">QueryResult</span><span class="token operator">&lt;</span>CoursePub<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//结果集处理</span>            SearchHits hits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SearchHit<span class="token punctuation">[</span><span class="token punctuation">]</span> searchHits <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//结果总数</span>            <span class="token keyword">long</span> totalHits <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据列表</span>            List<span class="token operator">&lt;</span>CoursePub<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit searchHit <span class="token operator">:</span> searchHits<span class="token punctuation">)</span> <span class="token punctuation">{</span>                CoursePub coursePub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoursePub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//取出source</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> searchHit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//取名称</span>                String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                coursePub<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//取图片</span>                String pic <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"pic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                coursePub<span class="token punctuation">.</span><span class="token function">setPic</span><span class="token punctuation">(</span>pic<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>coursePub<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            queryResult<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            queryResult<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>totalHits<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QueryResponseResult</span><span class="token punctuation">(</span>CommonCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span>queryResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后，我们可以通过暴露的接口，对该方法进行调用，执行搜索。</p><p>swagger执行搜索：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-dc02287ba596f918.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>得到的搜索结果：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-25de13ce31341b02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建虚拟机后的常规配置</title>
      <link href="/2020/01/26/%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%8E%E7%9A%84%E5%B8%B8%E8%A7%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/26/%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%8E%E7%9A%84%E5%B8%B8%E8%A7%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="建虚拟机后的常规配置"><a href="#建虚拟机后的常规配置" class="headerlink" title="建虚拟机后的常规配置"></a>建虚拟机后的常规配置</h1><ol><li><p>网络配置：</p><pre class=" language-java"><code class="language-java">vi <span class="token operator">/</span>etc<span class="token operator">/</span>sysconfig<span class="token operator">/</span>network<span class="token operator">-</span>scripts<span class="token operator">/</span>ifcfg<span class="token operator">-</span>ens33</code></pre><p>修改最后的onboot属性为yes（按 i 修改，按 Esc 退出编辑，按 :wq 保存并退出）。</p><pre class=" language-java"><code class="language-java"># 若想让ip固定不变，则继续修改ifcfg<span class="token operator">-</span>ens33# 将BOOTPROTO改为<span class="token keyword">static</span>，加一项IPADDR<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">31.132</span># 重启网络服务service network restart#查看inet即可知道本机ipip addr</code></pre></li></ol><ol start="2"><li><p>赋予操作权限：</p><pre class=" language-java"><code class="language-java">chmod <span class="token number">777</span> <span class="token operator">/</span>etc<span class="token operator">/</span>guotianchi</code></pre></li></ol><ol start="3"><li><p>关闭防火墙</p><pre class=" language-java"><code class="language-java">systemctl stop firewalld<span class="token punctuation">.</span>service #停止firewallsystemctl disable firewalld<span class="token punctuation">.</span>service #禁止firewall开机启动firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 安装 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch入门</title>
      <link href="/2020/01/25/Elasticsearch%E5%85%A5%E9%97%A8/"/>
      <url>/2020/01/25/Elasticsearch%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Elasticsearch入门"><a href="#Elasticsearch入门" class="headerlink" title="Elasticsearch入门"></a>Elasticsearch入门</h1><h2 id="1-安装ElasticSearch及插件"><a href="#1-安装ElasticSearch及插件" class="headerlink" title="1 安装ElasticSearch及插件"></a>1 安装ElasticSearch及插件</h2><h3 id="1-1-安装ElasticSearch"><a href="#1-1-安装ElasticSearch" class="headerlink" title="1.1 安装ElasticSearch"></a>1.1 安装ElasticSearch</h3><h3 id="1-2-安装head插件"><a href="#1-2-安装head插件" class="headerlink" title="1.2 安装head插件"></a>1.2 安装head插件</h3><p>启动head命令，在当前文件夹内，cmd。然后输入npm start run ，即可在localhost:9100访问</p><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2 快速入门"></a>2 快速入门</h2><h3 id="2-1-建立索引库，加索引，加文档，完成简单搜索"><a href="#2-1-建立索引库，加索引，加文档，完成简单搜索" class="headerlink" title="2.1 建立索引库，加索引，加文档，完成简单搜索"></a>2.1 建立索引库，加索引，加文档，完成简单搜索</h3><p>利用postman建立索引库，通过 <a href="http://localhost:9200/xc_course" target="_blank" rel="noopener">http://localhost:9200/xc_course</a> 接口的PUT请求，发送json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"settings"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"number_of_shards"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>    //分片数            <span class="token property">"number_of_replicas"</span><span class="token operator">:</span><span class="token number">0</span>    //副本数        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后，建立映射，通过 <a href="http://localhost:9200/xc_course/doc/_mapping" target="_blank" rel="noopener">http://localhost:9200/xc_course/doc/_mapping</a> 接口的PUT请求，发送json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"description"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"studymodel"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建文档，通过 <a href="http://localhost:9200/xc_course/doc/12345678" target="_blank" rel="noopener">http://localhost:9200/xc_course/doc/12345678</a>  接口的 PUT/POST 请求，发送json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"BootStrap"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span><span class="token string">"我一会要看电影放松一下心情，偷懒3小时"</span><span class="token punctuation">,</span>    <span class="token property">"studymodel"</span><span class="token operator">:</span><span class="token string">"201001"</span><span class="token punctuation">}</span></code></pre><p>简单搜索： <a href="http://localhost:9200/xc_course/doc/12345678" target="_blank" rel="noopener">http://localhost:9200/xc_course/doc/12345678</a> 接口的 GET 方法；</p><p>​                    <a href="http://localhost:9200/xc_course/doc/_search" target="_blank" rel="noopener">http://localhost:9200/xc_course/doc/_search</a> 接口的 GET 方法；</p><p>​                    <a href="http://localhost:9200/xc_course/doc/_search?q=name:购物车" target="_blank" rel="noopener">http://localhost:9200/xc_course/doc/_search?q=name:购物车</a> 接口的 GET 方法；</p><h2 id="3-IK分词器"><a href="#3-IK分词器" class="headerlink" title="3 IK分词器"></a>3 IK分词器</h2><p>安装ik分词器，利用 <a href="http://localhost:9200/_analyze" target="_blank" rel="noopener">http://localhost:9200/_analyze</a> 接口进行分词测试：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"我一会要看电影放松一下心情，偷懒3小时"</span><span class="token punctuation">,</span>    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_smart"</span>   //如果不加analyzer，则使用es自带分词器。此处还有ik_max_word 细粒度比 ik_smart 高<span class="token punctuation">}</span></code></pre><p>自定义分词器。<strong>在ElasticSearch文件夹的plungs目录下的ik改配置！！！</strong></p><p>设置分词器时，索引用 ik_max_word 细颗粒度（分的越细，越容易将文章暴露出去，方便自己被搜索），搜索用 ik_smart 粗颗粒度（分的越粗，匹配的会更少，更精确）。</p><p><strong>字段类型</strong>：</p><p><strong>text</strong> 是文本字段，可以被全文检索,可以分词。</p><pre class=" language-json"><code class="language-json"><span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>    <span class="token property">"analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>    <span class="token property">"search_analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">}</span></code></pre><p><strong>keyword是精确匹配，不被分词！</strong> </p><p><strong>data</strong> 是日期类型，通过format设置日期格式。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span><span class="token punctuation">,</span>                <span class="token property">"format"</span><span class="token operator">:</span> "yyyy‐MM‐dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss||yyyy‐MM‐dd"               <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以后再建立映射时：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>       <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                        <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>                                                           <span class="token property">"search_analyzer"</span><span class="token operator">:</span><span class="token string">"ik_smart"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                        <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>                                                           <span class="token property">"search_analyzer"</span><span class="token operator">:</span><span class="token string">"ik_smart"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token property">"pic"</span><span class="token operator">:</span><span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>                        <span class="token property">"index"</span><span class="token operator">:</span><span class="token boolean">false</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token property">"studymodel"</span><span class="token operator">:</span><span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数值类型：尽量选择范围小的类型，提高搜索效率。对于浮点数尽量用比例因子，比如价格单位是“元”，我们将比例因子设为100，这就会按照“分”来存储。</p><pre class=" language-json"><code class="language-json"><span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"scaled_float"</span><span class="token punctuation">,</span>    <span class="token property">"scaling_factor"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS搭建</title>
      <link href="/2020/01/20/FastDFS%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/01/20/FastDFS%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="FastDFS搭建"><a href="#FastDFS搭建" class="headerlink" title="FastDFS搭建"></a>FastDFS搭建</h1><ol><li><p>安装VMware虚拟机，选择CentOS7虚拟机。其中在安装CentOS时，最好选择相关工具及所用的环境。</p></li><li><p><strong>tracker的安装</strong>：需要 FastDFS_v5.05.tar.gz 安装包。</p><p>首先，安装 FastDFS需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，需要安装</p><pre class=" language-java"><code class="language-java">gcc：yum install gcc<span class="token operator">-</span>c<span class="token operator">++</span> </code></pre><p>FastDFS依赖libevent库，需要安装：</p><pre class=" language-java"><code class="language-java">yum <span class="token operator">-</span>y install libevent</code></pre><p>同时需要libfastcommon提供的基础库，需要 libfastcommonV1.0.7.tar.gz安装包，将其拷贝至/usr/local/下 </p><pre class=" language-java"><code class="language-java">cd <span class="token operator">/</span>usr<span class="token operator">/</span>local tar <span class="token operator">-</span>zxvf libfastcommonV1<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz cd libfastcommon<span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">7</span> <span class="token punctuation">.</span>/make<span class="token punctuation">.</span>sh <span class="token punctuation">.</span>/make<span class="token punctuation">.</span>sh install </code></pre><p>注意：libfastcommon安装好后会自动将库文件拷贝至/usr/lib64下，由于FastDFS程序引用usr/lib目录所以需要将/usr/lib64下的库文件拷贝至/usr/lib下。 要拷贝的文件：libfastcommon.so </p><p>最后，<strong>tracker的编译与安装</strong>：将FastDFS_v5.05.tar.gz拷贝至/usr/local/下</p><pre class=" language-java"><code class="language-java">tar <span class="token operator">-</span>zxvf FastDFS_v5<span class="token number">.05</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz cd FastDFS <span class="token punctuation">.</span>/make<span class="token punctuation">.</span>sh 编译 <span class="token punctuation">.</span>/make<span class="token punctuation">.</span>sh install  安装 </code></pre><p>安装成功后，将安装目录下的conf文件夹中相关文件拷贝到/etc/fdfs/下，涉及文件：client.conf , http.conf , mime.types , storage.conf , storage_ids.conf , tracker.conf </p><p>另，<strong>相关配置</strong>：安装成功后进入/etc/fdfs目录，拷贝一份新的tracker配置文件。</p><pre class=" language-java"><code class="language-java">cp tracker<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>sample tracker<span class="token punctuation">.</span>conf #修改 tracker<span class="token punctuation">.</span>confvi tracker<span class="token punctuation">.</span>conf</code></pre><p>base_path=/home/yuqing/fastdfs  改为 :  base_path=/home/fastdfs<br>http.server_port  改为: 80</p><p>修改配置后，在home下创建相应的文件夹fastdfs</p><pre class=" language-java"><code class="language-java">#启动tracker，成功后会在home<span class="token operator">/</span>fastdfs<span class="token operator">/</span>目录下生成两个目录：data<span class="token punctuation">,</span>logs<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>fdfs_trackerd <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span>tracker<span class="token punctuation">.</span>conf restart</code></pre></li><li><p>storage的安装和配置</p><p>由于上面已经安装过FastDFS，这里只需要配置storage就好了</p><p>切换目录到： /etc/fdfs/ 目录下，</p><pre><code># 拷贝一份新的storage配置文件cp storage.conf.sample storage.conf# 修改storage.confvi storage.confgroup_name=group1 #配置组名base_path=/home/yuqing/fastdfs    改为:  base_path=/home/fastdfs#store存放文件的位置(store_path)store_path0=/home/yuqing/fastdfs  改为： store_path0=/home/fdfs_storage #如果有多个挂载磁盘则定义多个store_path，如下#store_path1=.....#store_path2=......#配置tracker服务器:IPtracker_server=192.168.31.132:22122#如果有多个则配置多个tracker#tracker_server=192.168.101.4:22122#配置http端口http.server_port=88</code></pre><p> 创建 /home/fdfs_storage 目录</p><pre><code>mkdir /home/fdfs_storage</code></pre><p>启动storage， 运行命令如下：</p><pre><code>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</code></pre><p>启动完成后进入 /home/fdfs_storage/data 目录下，可以看到很多文件夹（00，07…）</p></li><li><p>使用FastDFS自带的工具测试：</p><p>切换目录到 /etc/fdfs 目录下，</p><pre class=" language-java"><code class="language-java"># 拷贝一份新的client配置文件cp client<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>sample client<span class="token punctuation">.</span>conf# 修改client<span class="token punctuation">.</span>confvi client<span class="token punctuation">.</span>confbase_path<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>fastdfstracker_server<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">31.132</span><span class="token operator">:</span><span class="token number">22122</span></code></pre><p>此时可以对某文件进行上传测试，例如在/home/guotianchi/下有一个文件tx.txt</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>fdfs_test <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span>client<span class="token punctuation">.</span>conf upload <span class="token operator">/</span>home<span class="token operator">/</span>guotianchi<span class="token operator">/</span>tx<span class="token punctuation">.</span>txt</code></pre><p>可以查看成功日志：图中的文件地址：<a href="http://192.168.172.20/group1/M00/00/00/wKisFFpBG9eAHaQvAAAWKd1hQR4158_big.jpg" target="_blank" rel="noopener">http://192.168.172.20/group1/M00/00/00/wKisFFpBG9eAHaQvAAAWKd1hQR4158_big.jpg</a> </p><p>对应storage服务器上的 /home/fdfs_storage/data/00/00/wKisFFpBG9eAHaQvAAAWKd1hQR4158_big.jpg文件；</p><p>由于现在还没有和nginx整合无法使用http下载。</p><p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F%E6%97%A5%E5%BF%97.png" alt=""></p></li><li><p>编写运行脚本。通过 ./test.sh 一键启动</p><p>tracker和storage的运行需要命令行启动，此时可以选择将其命令行编写为脚本，进行一键启动。编辑 test.sh 文件，文件中插入相关命令。</p><pre class=" language-java"><code class="language-java">#<span class="token operator">!</span> <span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>fdfs_trackerd <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span>tracker<span class="token punctuation">.</span>conf restart<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>fdfs_storaged <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span>storage<span class="token punctuation">.</span>conf restart</code></pre><p>因为在windows系统下操作，所以会使格式发生错误（换行多了/r），所以可以用命令去除多余字符。</p><pre class=" language-java"><code class="language-java"># 去除多余字符sed <span class="token operator">-</span>i <span class="token string">'s/\r$//'</span> test<span class="token punctuation">.</span>sh# 通过 <span class="token punctuation">.</span>/test<span class="token punctuation">.</span>sh 一键启动<span class="token punctuation">.</span>/test<span class="token punctuation">.</span>sh# 查看运行状态ps aux<span class="token operator">|</span>grep dfs</code></pre></li></ol><ol start="6"><li><p>FastDFS和nginx整合</p><p>6.1 每个<strong>tracker上安装nginx</strong>，为了做负载均衡及实现高可用。如果只有一台tracker，可以不用配置nginx，一个tracker对应多个storage，通过nginx对storage负载均衡；</p><p>6.2 <strong>storage上安装nginx</strong></p><p>（1）上传 fastdfs-nginx-module_v1.16.tar.gz 到Centos服务器上；</p><p>（2）解压 fastdfs-nginx-module_v1.16.tar.gz 到 /usr/local目录下；</p><pre class=" language-java"><code class="language-java">tar <span class="token operator">-</span>zxvf fastdfs<span class="token operator">-</span>nginx<span class="token operator">-</span>module_v1<span class="token number">.16</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">-</span>C <span class="token operator">/</span>usr<span class="token operator">/</span>local</code></pre><p>（3）切换目录到： /usr/local/fastdfs-nginx-module/src/ 目录下</p><pre class=" language-java"><code class="language-java">cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>fastdfs<span class="token operator">-</span>nginx<span class="token operator">-</span>module<span class="token operator">/</span>src<span class="token operator">/</span></code></pre><p>（4）修改config文件，将文件中的所有 /usr/local/ 路径改为 /usr/</p><p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E4%BF%AE%E6%94%B9usr%E8%B7%AF%E5%BE%84.png" alt=""></p><p>修改完成后：</p><p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E4%BF%AE%E6%94%B9usr%E8%B7%AF%E5%BE%84%E5%AE%8C%E6%88%90%E5%90%8E.png" alt=""></p><p>（5）将fastdfs-nginx-module/src下的mod_fastdfs.conf拷贝至/etc/fdfs/下</p><pre class=" language-java"><code class="language-java">cp mod_fastdfs<span class="token punctuation">.</span>conf <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span></code></pre><p>（6）并修改 /etc/fdfs/mod_fastdfs.conf 的内容；<strong>vi /etc/fdfs/mod_fastdfs.conf</strong></p><p> base_path=/tmp 修改为 base_path=/home/fastdfs</p><pre class=" language-java"><code class="language-java">base_path<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>fastdfstracker_server<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">31.132</span><span class="token operator">:</span><span class="token number">22122</span> #tracker_server<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">172.20</span><span class="token operator">:</span><span class="token number">22122</span> #<span class="token punctuation">(</span>多个tracker配置多行<span class="token punctuation">)</span>url_have_group_name<span class="token operator">=</span><span class="token boolean">true</span>        #url中包含group名称store_path0<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>fdfs_storage  #指定文件存储路径（上面配置的store路径）</code></pre><p>（7）将libfdfsclient.so拷贝至/usr/lib下</p><pre class=" language-java"><code class="language-java">cp <span class="token operator">/</span>usr<span class="token operator">/</span>lib64<span class="token operator">/</span>libfdfsclient<span class="token punctuation">.</span>so <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span></code></pre><p>（8）创建nginx/client目录</p><pre class=" language-java"><code class="language-java">mkdir <span class="token operator">-</span>p <span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>client</code></pre><p>6.3 <strong>nginx的安装</strong></p><p>（1）上传 nginx-1.8.0.tar.gz 到Centos服务器上；注意，此处不要用nginx的zip包，那是个坑啊。</p><p>（2）解压 nginx-1.8.0.tar.gz 到 /usr/local目录下；</p><pre><code>tar -zxvf nginx-1.14.12.tar.gz -C /usr/local/</code></pre><p>（3）安装nginx的依赖库</p><pre><code>yum install pcreyum install pcre-develyum install zlibyum install zlib-develyum install opensslyum install openssl-devel</code></pre><p>（4）进入nginx解压的目录下：<strong>cd /usr/local/nginx-1.14.12/</strong></p><p>（5）加入模块命令配置，输入以下：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/configure \<span class="token operator">--</span>prefix<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx \<span class="token operator">--</span>pid<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>nginx<span class="token operator">/</span>nginx<span class="token punctuation">.</span>pid \<span class="token operator">--</span>lock<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>lock<span class="token operator">/</span>nginx<span class="token punctuation">.</span>lock \<span class="token operator">--</span>error<span class="token operator">-</span>log<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log \<span class="token operator">--</span>http<span class="token operator">-</span>log<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log \<span class="token operator">--</span>with<span class="token operator">-</span>http_gzip_static_module \<span class="token operator">--</span>http<span class="token operator">-</span>client<span class="token operator">-</span>body<span class="token operator">-</span>temp<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>client \<span class="token operator">--</span>http<span class="token operator">-</span>proxy<span class="token operator">-</span>temp<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>proxy \<span class="token operator">--</span>http<span class="token operator">-</span>fastcgi<span class="token operator">-</span>temp<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>fastcgi \<span class="token operator">--</span>http<span class="token operator">-</span>uwsgi<span class="token operator">-</span>temp<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>uwsgi \<span class="token operator">--</span>http<span class="token operator">-</span>scgi<span class="token operator">-</span>temp<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>scgi \<span class="token operator">--</span>add<span class="token operator">-</span>module<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>fastdfs<span class="token operator">-</span>nginx<span class="token operator">-</span>module<span class="token operator">/</span>src</code></pre><p><strong>注意：上边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录；</strong></p><p>（6）编译并安装，安装后可以查看/usr/local/nginx 下，有conf,html,sbin文件夹生成</p><pre class=" language-java"><code class="language-java">make <span class="token operator">&amp;&amp;</span> make install</code></pre><p>（7）拷贝配置文件到 /etc/fdfs 下；</p><pre class=" language-java"><code class="language-java">cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>FastDFS<span class="token operator">/</span>confcp http<span class="token punctuation">.</span>conf mime<span class="token punctuation">.</span>types <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span></code></pre><p>（8）修改nginx配置文件</p><p><img src="https://images2017.cnblogs.com/blog/1107037/201712/1107037-20171227204412972-1320764618.png" alt="img"></p><pre class=" language-java"><code class="language-java"># 创建logs目录cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>mkdir <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>logsvim nginx<span class="token punctuation">.</span>conf</code></pre><p>做如下的修改：</p><p>　　<img src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180106211140565-2088673686.png" alt="img"></p><p>　　<img src="https://images2017.cnblogs.com/blog/1107037/201712/1107037-20171227211338675-1973886058.png" alt="img"></p><p><strong>说明</strong>：</p><p>　　(a) server_name为本虚拟机ip，我的是192.168.31.132；</p><p>　　(b) location /group1/M00/：group1为nginx 服务FastDFS的分组名称，M00是FastDFS自动生成编号，            对应store_path0=/home/fdfs_storage，如果FastDFS定义store_path1，这里就是M01</p></li></ol><pre><code>（9）nginx的启动</code></pre><pre class=" language-java"><code class="language-java">   cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>   <span class="token punctuation">.</span>/nginx   # 查询nginx进程   ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep nginx</code></pre><p>   <img src="https://images2017.cnblogs.com/blog/1107037/201712/1107037-20171227211548191-1498752184.png" alt="img"></p><p>   6.4 <strong>浏览器测试</strong></p><p>   在浏览器输入地址：<a href="http://192.168.31.132/group1/M00/00/00/xxxxxxxxxxxxxx.png" target="_blank" rel="noopener">http://192.168.31.132/group1/M00/00/00/xxxxxxxxxxxxxx.png</a></p><ol start="7"><li><p>杀进程。linux解决nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</p><pre class=" language-java"><code class="language-java">#查看端口netstat <span class="token operator">-</span>ntlp# 看到nginx<span class="token operator">:</span>master 前面的端口号 <span class="token number">123</span>kill <span class="token number">123</span></code></pre></li><li><p>fastdfs 和 nginx 的自启动</p><p>编辑 /etc/rc.d/rc.local 文件，增加启动项；</p><p>8.1 编辑文件</p><pre class=" language-java"><code class="language-java">vi <span class="token operator">/</span>etc<span class="token operator">/</span>rc<span class="token punctuation">.</span>d<span class="token operator">/</span>rc<span class="token punctuation">.</span>local</code></pre><p>8.2 增加如下：</p><pre class=" language-java"><code class="language-java"></code></pre><h1 id="fastdfs-start"><a href="#fastdfs-start" class="headerlink" title="fastdfs start"></a>fastdfs start</h1><p>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart<br>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</p><h1 id="nginx-start"><a href="#nginx-start" class="headerlink" title="nginx start"></a>nginx start</h1><p>/usr/local/nginx/sbin/nginx</p><pre><code>![img](https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180106211839253-1864240580.png)3、在centos7中, /etc/rc.d/rc.local 文件的权限被降低了，需要给rc.local 文件增加可执行的权限；```javachmod +x /etc/rc.d/rc.local</code></pre></li></ol><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> FastDFS </tag>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker上搭建自己的Git管理平台</title>
      <link href="/2020/01/09/Docker%E4%B8%8A%E6%90%AD%E5%BB%BAGogs/"/>
      <url>/2020/01/09/Docker%E4%B8%8A%E6%90%AD%E5%BB%BAGogs/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Docker上搭建自己的Git管理平台"><a href="#Docker上搭建自己的Git管理平台" class="headerlink" title="Docker上搭建自己的Git管理平台"></a>Docker上搭建自己的Git管理平台</h1><h2 id="初识docker"><a href="#初识docker" class="headerlink" title="初识docker"></a>初识docker</h2><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre class=" language-java"><code class="language-java"># 查找centos镜像docker search centos# 下载centos镜像sudo docker pull docker<span class="token punctuation">.</span>io<span class="token operator">/</span>centos<span class="token operator">:</span>latest# 查看镜像sudo docker image ls# 删除镜像sudo docker image rm <span class="token number">123456789</span># 若有容器<span class="token punctuation">(</span>container<span class="token punctuation">)</span>在引用此镜像会造成删除失败，则先删除容器# 先查看正在运行的container，再根据container的id删除docker ps <span class="token operator">-</span>adocker rm <span class="token function">123456</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span>docker image rm <span class="token function">123456789</span><span class="token punctuation">(</span>imageId<span class="token punctuation">)</span># 创建容器并进入其中，参数说明<span class="token operator">:</span> <span class="token operator">-</span>t分配一个伪终端并绑定到容器的标准输入，<span class="token operator">-</span>i 让容器的标准输入保持打开sudo docker run <span class="token operator">-</span>t <span class="token operator">-</span>i <span class="token operator">--</span>name guo<span class="token operator">-</span>centos docker<span class="token punctuation">.</span>io<span class="token operator">/</span>centos<span class="token operator">:</span>latest <span class="token operator">/</span>bin<span class="token operator">/</span>bash#  退出容器exit# 删除容器sudo docker rm guo<span class="token operator">-</span>centos# 查看所有容器sudo docker ps <span class="token operator">-</span>a# 查看当前运行的容器sudo docker ps# 启动容器sudo docker start guo<span class="token operator">-</span>centos# 停止容器sudo docker stop guo<span class="token operator">-</span>centos# 进入容器环境sudo docker attach guo<span class="token operator">-</span>centos#容器内部发送指令sudo docker exec guo<span class="token operator">-</span>centos touch xyz<span class="token punctuation">.</span>txt</code></pre><h2 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h2><pre class=" language-java"><code class="language-java"># 将guo<span class="token operator">-</span>centos容器内的xyz<span class="token punctuation">.</span>txt文件拷贝到根目录下sudo docker cp guo<span class="token operator">-</span>centos<span class="token operator">:</span>xyz<span class="token punctuation">.</span>txt <span class="token punctuation">.</span>/# 将自定义容器发布为镜像，参数说明：<span class="token operator">-</span>a为作者，<span class="token operator">-</span>m为提交信息sudo docker commit <span class="token operator">-</span>a <span class="token string">"GTC"</span> <span class="token operator">-</span>m <span class="token string">"add txt"</span> guo<span class="token operator">-</span>centos guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span># 基于新建的镜像创建容器，生成的新容器，包含镜像内曾经有的xyz<span class="token punctuation">.</span>txtsudo docker run <span class="token operator">-</span>t <span class="token operator">-</span>i <span class="token operator">--</span>name another<span class="token operator">-</span>centos guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span> <span class="token operator">/</span>bin<span class="token operator">/</span>bash# 查看镜像信息sudo docker history guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span># 查看容器内变动日志sudo docker diff guo<span class="token operator">-</span>centos  # 查看镜像的详细信息sudo docker inspect zhaoolee<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span> # 查看容器的详细信息sudo docker inspect zhaoolee<span class="token operator">-</span>centos</code></pre><h2 id="私有库的创建"><a href="#私有库的创建" class="headerlink" title="私有库的创建"></a>私有库的创建</h2><pre class=" language-java"><code class="language-java"># <span class="token number">1</span><span class="token punctuation">.</span>下载私有仓库注册服务器的镜像sudo docker pull registry<span class="token operator">:</span>latest# <span class="token number">2</span><span class="token punctuation">.</span>创建一个注册服务器容器<span class="token punctuation">,</span>参数说明 <span class="token operator">-</span>d容器在后端运行<span class="token punctuation">,</span> <span class="token operator">-</span>p <span class="token number">5000</span><span class="token operator">:</span><span class="token number">5000</span>在容器的<span class="token number">5000</span>端口运行并映射到外部系统的<span class="token number">5000</span>端口<span class="token punctuation">,</span> <span class="token operator">--</span>name server<span class="token operator">-</span>registry容器命名为guo<span class="token operator">-</span>server<span class="token operator">-</span>registry<span class="token punctuation">,</span> <span class="token operator">-</span>v <span class="token operator">/</span>tmp<span class="token operator">/</span>registry <span class="token operator">/</span>tmp<span class="token operator">/</span>registry把宿主机的目录<span class="token operator">/</span>tmp<span class="token operator">/</span>registry挂载到容器目录<span class="token operator">/</span>tmp<span class="token operator">/</span>registrysudo docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">5000</span><span class="token operator">:</span><span class="token number">5000</span> <span class="token operator">--</span>name guo<span class="token operator">-</span>server<span class="token operator">-</span>registry <span class="token operator">-</span>v <span class="token operator">/</span>tmp<span class="token operator">/</span>registry<span class="token operator">:</span><span class="token operator">/</span>tmp<span class="token operator">/</span>registry docker<span class="token punctuation">.</span>io<span class="token operator">/</span>registry<span class="token operator">:</span>latest# <span class="token number">3</span><span class="token punctuation">.</span>为本地镜像添加标签，并将其归入本地仓库sudo docker tag guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span> localhost<span class="token operator">:</span><span class="token number">5000</span><span class="token operator">/</span>guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span># 将被标记的本地镜像推到库中sudo docker push localhost<span class="token operator">:</span><span class="token number">5000</span><span class="token operator">/</span>guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span># <span class="token number">4</span><span class="token punctuation">.</span>使用sudo docker pull <span class="token number">143</span><span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token operator">:</span><span class="token number">5000</span><span class="token operator">/</span>guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span></code></pre><h2 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h2><p>如果已有老版本docker，先查看已安装的docker：</p><pre class=" language-java"><code class="language-java">yum list installed <span class="token operator">|</span> grep docker</code></pre><p>可以看见已经安装的：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-2c9c02c911a4cdf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>将其卸载，以防冲突：</p><pre class=" language-java"><code class="language-java">yum <span class="token operator">-</span>y remove  containerd<span class="token punctuation">.</span>io<span class="token punctuation">.</span>x86_64  docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>x86_64  docker<span class="token operator">-</span>ce<span class="token operator">-</span>cli<span class="token punctuation">.</span>x86_64</code></pre><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><pre class=" language-java"><code class="language-java"># 通过yum源安装dockeryum <span class="token operator">-</span>y install docker# 启动dockersystemctl start docker# 开机自启sudo systemctl enable docker</code></pre><p>也可以通过“宝塔”进行快速安装设置。</p><h2 id="下载gogs的镜像"><a href="#下载gogs的镜像" class="headerlink" title="下载gogs的镜像"></a>下载gogs的镜像</h2><pre class=" language-java"><code class="language-java">docker pull gogs<span class="token operator">/</span>gogs</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/19860184-2fa1c8d2d6f20b73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="创建gogs的储存文件夹"><a href="#创建gogs的储存文件夹" class="headerlink" title="创建gogs的储存文件夹"></a>创建gogs的储存文件夹</h2><pre class=" language-java"><code class="language-java">mkdir <span class="token operator">-</span>p <span class="token operator">/</span>var<span class="token operator">/</span>gogs</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/19860184-f27f7c6125595a8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="运行镜像，产生容器，映射端口"><a href="#运行镜像，产生容器，映射端口" class="headerlink" title="运行镜像，产生容器，映射端口"></a>运行镜像，产生容器，映射端口</h2><pre class=" language-java"><code class="language-java">docker run <span class="token operator">--</span>name<span class="token operator">=</span>gogs <span class="token operator">-</span>p <span class="token number">10022</span><span class="token operator">:</span><span class="token number">22</span> <span class="token operator">-</span>p <span class="token number">10080</span><span class="token operator">:</span><span class="token number">3000</span> <span class="token operator">-</span>v <span class="token operator">/</span>var<span class="token operator">/</span>gogs<span class="token operator">:</span><span class="token operator">/</span>data gogs<span class="token operator">/</span>gogs</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/19860184-c526d3613651048a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="对数据库、端口、账户进行最后的配置"><a href="#对数据库、端口、账户进行最后的配置" class="headerlink" title="对数据库、端口、账户进行最后的配置"></a>对数据库、端口、账户进行最后的配置</h2><p>以下的配置我忘记截图了，本章两张图片来源简书@zhaoolee</p><p>数据库的简单配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-5637b909c88235d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gogs数据库.png"></p><p>仓库的端口、账户配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-55a640eab8ed9627.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gogs配置.png"></p><p>至此，已经完成了自己的git管理库！</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-e942cb08d0d1a308.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git-gogs成果图.png"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> docker </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>freemarker基础</title>
      <link href="/2020/01/03/freemarker%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/01/03/freemarker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="freemarker基础"><a href="#freemarker基础" class="headerlink" title="freemarker基础"></a>freemarker基础</h1><ol><li><p>注释,&lt;#–    –&gt;</p></li><li><p>插值，${name}</p></li><li><p>FTL指令：</p><pre class=" language-html"><code class="language-html">遍历list:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">students</span> <span class="token attr-name">as</span> <span class="token attr-name">stu</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${stu_index}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${stu.name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    集合students的大小：${students?size}map:    方法1：直接取对象        姓名：${stuMap['stu1'].name}    方法2：直接取key（把对象当作key）        姓名：${stuMap.stu1.name}    方法3：取出所有key，用list遍历        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">stuMap?key</span> <span class="token attr-name">as</span> <span class="token attr-name">k</span><span class="token punctuation">></span></span>            姓名：${stuMap[k].name}  此处不能用方法2的“.”        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span></code></pre></li></ol><ol start="4"><li><p>if</p><pre class=" language-html"><code class="language-html">&lt;td &lt;#if stu.name == '小明'>style="background:red;"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#if</span><span class="token punctuation">></span></span>>ahha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>注：大于比较用 gt空值处理,方法1：        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#if</span> <span class="token attr-name">stus??</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">stus</span> <span class="token attr-name">as</span> <span class="token attr-name">s</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#if</span><span class="token punctuation">></span></span>    方法2：缺省值，如果stuhuofirst或name为空，则显示‘’        ${(stu.first.name)!''}</code></pre></li></ol><ol start="5"><li><p>日期格式化</p><pre class=" language-html"><code class="language-html">年月日：${today?date}时分秒：${today?time}日期和时间：${today?datetime}自定义格式化：${today?string("yyyy年MM月dd日")}</code></pre></li></ol><ol start="6"><li><p>数字转字符串</p><pre class=" language-html"><code class="language-html">${point?c}</code></pre></li></ol><ol start="7"><li><p>json转对象</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#assign</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>bank:<span class="token punctuation">'</span>银行<span class="token punctuation">'</span>,<span class="token punctuation">'</span>account<span class="token punctuation">'</span>:<span class="token punctuation">'</span>123456<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#assign</span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span>text?eval</span> <span class="token punctuation">/></span></span>开户行：${data.bank}</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 前端 </tag>
            
            <tag> freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实现文章点赞</title>
      <link href="/2019/12/27/SpringBoot%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%82%B9%E8%B5%9E/"/>
      <url>/2019/12/27/SpringBoot%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%82%B9%E8%B5%9E/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="SpringBoot实现文章点赞"><a href="#SpringBoot实现文章点赞" class="headerlink" title="SpringBoot实现文章点赞"></a>SpringBoot实现文章点赞</h1><p>点赞这种需求还算是很常见的，其大体流程也是很容易想明白的。因为类似于点赞这种操作，如果用户比较闲，就是一顿点…点一下我就操作一下数据库，取消一下我再操作一下数据库……所以具体实现思路是：</p><ul><li>用户点“点赞”按钮</li><li>redis存储这个“赞”</li><li>用户取消“赞”</li><li>redis随之取消“赞”</li><li>一定时间后，系统将这些“赞”做持久化</li></ul><p>思路是这样的，具体实现也是比较容易的：</p><ol><li><p>redis缓存相关</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>         <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>         <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>在maven引入依赖后，对redis进行相关配置</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnMissingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringRedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>UnknownHostException<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>            RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span>            <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        Jackson2JsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>StringRedisTemplate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> StringRedisTemplate <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span>            RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span>            <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        StringRedisTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件也要写一下：</p><pre class=" language-java"><code class="language-java">  spring<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>host<span class="token operator">=</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>  spring<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>port<span class="token operator">:</span> <span class="token number">6379</span></code></pre></li></ol><ol start="2"><li><p>定时任务相关</p><p>一样的，引入定时的依赖：</p><pre class=" language-java"><code class="language-java">       <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定时任务<span class="token operator">--</span><span class="token operator">></span>       <span class="token operator">&lt;</span>dependency<span class="token operator">></span>           <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>           <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>quartz<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>并配置：</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>LikeTask<span class="token punctuation">;</span>   <span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>*<span class="token punctuation">;</span>   <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>   <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Configuration</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzConfig</span> <span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LIKE_TASK_IDENTITY <span class="token operator">=</span> <span class="token string">"LikeTaskQuartz"</span><span class="token punctuation">;</span>       <span class="token annotation punctuation">@Bean</span>       <span class="token keyword">public</span> JobDetail <span class="token function">quartzDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>LikeTask<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>LIKE_TASK_IDENTITY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Bean</span>       <span class="token keyword">public</span> Trigger <span class="token function">quartzTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           SimpleScheduleBuilder scheduleBuilder <span class="token operator">=</span> SimpleScheduleBuilder<span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置时间周期单位秒,这样效果更明显</span>                   <span class="token comment" spellcheck="true">//.withIntervalInHours(2)  //两个小时执行一次</span>                   <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">quartzDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>LIKE_TASK_IDENTITY<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>scheduleBuilder<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>制定任务：</p><pre class=" language-java"><code class="language-java">  ```java  <span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>LikedService<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobExecutionContext<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobExecutionException<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>QuartzJobBean<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 点赞的定时任务   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LikeTask</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> LikedService likedService<span class="token punctuation">;</span>      <span class="token keyword">private</span> SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span>JobExecutionContext jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> JobExecutionException <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------quartz------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//将 Redis 里的点赞信息同步到数据库里</span>          likedService<span class="token punctuation">.</span><span class="token function">transLikedFromRedis2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          likedService<span class="token punctuation">.</span><span class="token function">transLikedCountFromRedis2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ol><ol start="3"><li><p>数据库表结构的设计</p><p>因为博客项目算是个小项目了，这里为了演示方便，点赞这个模块就先以简易为主。</p><p>liked_user_id为被赞者，liked_post_id为发出者。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>LikedStatusEnum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 用户点赞表 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLike</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//主键id</span>    <span class="token keyword">private</span> String likeId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//被点赞的用户的id</span>    <span class="token keyword">private</span> String likedUserId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//点赞的用户的id</span>    <span class="token keyword">private</span> String likedPostId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//点赞的状态.默认未点赞</span>    <span class="token keyword">private</span> Integer status <span class="token operator">=</span> LikedStatusEnum<span class="token punctuation">.</span>UNLIKE<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserLike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserLike</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">,</span> Integer status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>likedUserId <span class="token operator">=</span> likedUserId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>likedPostId <span class="token operator">=</span> likedPostId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//getter setter</span><span class="token punctuation">}</span></code></pre><p>其中，用了枚举。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 用户点赞的状态  */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> LikedStatusEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 点赞     */</span>    <span class="token function">LIKE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"点赞"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 取消赞     */</span>    <span class="token function">UNLIKE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"取消点赞/未点赞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token function">LikedStatusEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终的表，是这个样子的：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-f426870ca9d9cfd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点赞表"></p></li><li><p>具体实现业务逻辑</p><p>这里有两点：<strong>第一是，先把用户的“赞”存在缓存层；第二，适当的时间，将缓存的数据拿出，进行持久化操作。</strong></p><p>考虑到redis存储的特点，选用hash的形式对“用户点赞操作”及“用户被点赞数量”两项进行存储。采用hash的具体原因：把点赞造成的不同影响，储存为不同分区，方便管理。</p><blockquote><p>@程序猿DD</p><p>因为 Hash 里的数据都是存在一个键里，可以通过这个键很方便的把所有的点赞数据都取出。</p><p>这个键里面的数据还可以存成键值对的形式，方便存入点赞人、被点赞人和点赞状态。</p></blockquote><p>第一，先把用户的“赞”存在缓存层。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>DTO<span class="token punctuation">.</span>LikedCountDTO<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>LikedStatusEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>UserLike<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>RedisService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>util<span class="token punctuation">.</span>RedisKeyUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Cursor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ScanOptions<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">RedisService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveLiked2Redis</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> RedisKeyUtils<span class="token punctuation">.</span><span class="token function">getLikedKey</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">,</span> likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED<span class="token punctuation">,</span> key<span class="token punctuation">,</span> LikedStatusEnum<span class="token punctuation">.</span>LIKE<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlikeFromRedis</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> RedisKeyUtils<span class="token punctuation">.</span><span class="token function">getLikedKey</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">,</span> likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED<span class="token punctuation">,</span> key<span class="token punctuation">,</span> LikedStatusEnum<span class="token punctuation">.</span>UNLIKE<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteLikedFromRedis</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> RedisKeyUtils<span class="token punctuation">.</span><span class="token function">getLikedKey</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">,</span> likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incrementLikedCount</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED_COUNT<span class="token punctuation">,</span> likedUserId<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrementLikedCount</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED_COUNT<span class="token punctuation">,</span> likedUserId<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> <span class="token function">getLikedDataFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cursor<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">>></span> cursor <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED<span class="token punctuation">,</span> ScanOptions<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String key <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//分离出 likedUserId，likedPostId</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String likedUserId <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            String likedPostId <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            Integer value <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//组装成 UserLike 对象</span>            UserLike userLike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserLike</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">,</span> likedPostId<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userLike<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//存到 list 后从 Redis 中删除</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>LikedCountDTO<span class="token operator">></span> <span class="token function">getLikedCountFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cursor<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">>></span> cursor <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED_COUNT<span class="token punctuation">,</span> ScanOptions<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>LikedCountDTO<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将点赞数量存储在 LikedCountDT</span>            String key <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LikedCountDTO dto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LikedCountDTO</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从Redis中删除这条记录</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED_COUNT<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二，持久化操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>BlogArticleMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserLikeMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>DTO<span class="token punctuation">.</span>LikedCountDTO<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>BlogArticle<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>UserLike<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>LikedService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>RedisService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>util<span class="token punctuation">.</span>IdUtil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Pageable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LikedServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LikedService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisService redisService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserLikeMapper userLikeMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BlogArticleMapper blogArticleMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>UserLike userLike<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userLikeMapper<span class="token punctuation">.</span><span class="token function">saveLike</span><span class="token punctuation">(</span>userLike<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAll</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>UserLike userLike <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            userLikeMapper<span class="token punctuation">.</span><span class="token function">saveLike</span><span class="token punctuation">(</span>userLike<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> <span class="token function">getLikedListByLikedUserId</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> <span class="token function">getLikedListByLikedPostId</span><span class="token punctuation">(</span>String likedPostId<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getByLikedUserIdAndLikedPostId</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserLike userLike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserLike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userLike<span class="token punctuation">.</span><span class="token function">setLikedPostId</span><span class="token punctuation">(</span>likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>        userLike<span class="token punctuation">.</span><span class="token function">setLikedUserId</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userLikeMapper<span class="token punctuation">.</span><span class="token function">searchLike</span><span class="token punctuation">(</span>userLike<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transLikedFromRedis2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> userLikeList <span class="token operator">=</span> redisService<span class="token punctuation">.</span><span class="token function">getLikedDataFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>UserLike like <span class="token operator">:</span> userLikeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer userLikeExist <span class="token operator">=</span> userLikeMapper<span class="token punctuation">.</span><span class="token function">searchLike</span><span class="token punctuation">(</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>userLikeExist <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                userLikeMapper<span class="token punctuation">.</span><span class="token function">updateLike</span><span class="token punctuation">(</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                like<span class="token punctuation">.</span><span class="token function">setLikeId</span><span class="token punctuation">(</span>IdUtil<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                userLikeMapper<span class="token punctuation">.</span><span class="token function">saveLike</span><span class="token punctuation">(</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transLikedCountFromRedis2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>LikedCountDTO<span class="token operator">></span> likedCountDTOs <span class="token operator">=</span> redisService<span class="token punctuation">.</span><span class="token function">getLikedCountFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>LikedCountDTO dto <span class="token operator">:</span> likedCountDTOs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            JSONObject blogArticle <span class="token operator">=</span> blogArticleMapper<span class="token punctuation">.</span><span class="token function">getArticleById</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> blogArticle<span class="token punctuation">)</span><span class="token punctuation">{</span>                BlogArticle article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlogArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                article<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                article<span class="token punctuation">.</span><span class="token function">setArticleId</span><span class="token punctuation">(</span>blogArticle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"articleId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                article<span class="token punctuation">.</span><span class="token function">setArticleLike</span><span class="token punctuation">(</span>blogArticle<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token string">"articleLike"</span><span class="token punctuation">)</span> <span class="token operator">+</span> dto<span class="token punctuation">.</span><span class="token function">getLikedNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blogArticleMapper<span class="token punctuation">.</span><span class="token function">updateArticle</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="5"><li><p>用到的工具类</p><p>对点赞信息进行redis储存的id生成：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisKeyUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//保存用户点赞数据的key</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MAP_KEY_USER_LIKED <span class="token operator">=</span> <span class="token string">"MAP_USER_LIKED"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存用户被点赞数量的key</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MAP_KEY_USER_LIKED_COUNT <span class="token operator">=</span> <span class="token string">"MAP_USER_LIKED_COUNT"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 拼接被点赞的用户id和点赞的人的id作为key。格式 222222::333333     * @param likedUserId 被点赞的人id     * @param likedPostId 点赞的人的id     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getLikedKey</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">)</span><span class="token punctuation">{</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因为想做一个分布式项目，所以项目用到的id生成策略采用了雪花算法，代码过长，就不贴了。</p></li><li><p>测试，给测试来个接口，用postman测吧。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>UserLike<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>RedisService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestBody<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/like"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LikeController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisService redisService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doLike</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserLike userLike<span class="token punctuation">)</span><span class="token punctuation">{</span>        redisService<span class="token punctuation">.</span><span class="token function">saveLiked2Redis</span><span class="token punctuation">(</span>userLike<span class="token punctuation">.</span><span class="token function">getLikedUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>userLike<span class="token punctuation">.</span><span class="token function">getLikedPostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisService<span class="token punctuation">.</span><span class="token function">incrementLikedCount</span><span class="token punctuation">(</span>userLike<span class="token punctuation">.</span><span class="token function">getLikedPostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>发送值为：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span>        <span class="token string">"likedUserId"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">,</span>        <span class="token string">"likedPostId"</span><span class="token operator">:</span><span class="token string">"456"</span><span class="token punctuation">}</span></code></pre><p>此时缓存中可见：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-50ad4050f1d8cc3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>过了一会，缓存数据将被存进数据库中：缓存中没有数据，且值被写入数据库。</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-c0ad37bfc244af80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ol><p>至此，点赞完成！！！撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
            <tag> redis缓存 </tag>
            
            <tag> quartz定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础（四）路由相关</title>
      <link href="/2019/12/26/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B7%AF%E7%94%B1%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/12/26/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B7%AF%E7%94%B1%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Vue基础（四）"><a href="#Vue基础（四）" class="headerlink" title="Vue基础（四）"></a>Vue基础（四）</h1><h1 id="5-路由"><a href="#5-路由" class="headerlink" title="5.路由"></a>5.路由</h1><ul><li><p>若在建立项目初期，未选择路由配置，可在此处<strong>添加router</strong></p><blockquote><p>npm install vue-router –save-dev</p></blockquote><p>然后自己在 src - router新建index.js文件，配置路由相关。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> Vue from <span class="token string">'vue'</span><span class="token keyword">import</span> Router from <span class="token string">'vue-router'</span><span class="token keyword">import</span> HelloWorld from <span class="token string">'@/components/HelloWorld'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> HelloWorld    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//去掉地址中的#</span>    mode<span class="token operator">:</span><span class="token string">"history"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>并在main.js中注册</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> Vue from <span class="token string">'vue'</span><span class="token keyword">import</span> App from <span class="token string">'./App'</span><span class="token comment" spellcheck="true">//引用router</span><span class="token keyword">import</span> router from <span class="token string">'./router'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//注册router</span>  router<span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>最后在App.vue中添加要展现的内容</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre></li><li><p><strong>路由的使用：</strong>超链接可以不用<a>标签，避免页面的自动刷新；写法如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token operator">></span>HelloWorld<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre></li><li><p><strong>vue自带http请求：vue-resource</strong></p><blockquote><p>npm install vue-resource –save-dev</p></blockquote><p>先在main.js中引入vue-resource</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">import</span> VueResource from <span class="token string">'vue-resource'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//use之后，就可以在全局任何地方使用    </span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueResource<span class="token punctuation">)</span></code></pre><p>然后，在组件中：</p><pre class=" language-java"><code class="language-java"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://xxxxx"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>users <span class="token operator">=</span> data<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础（三）组件相关</title>
      <link href="/2019/12/25/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%84%E4%BB%B6%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/12/25/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%84%E4%BB%B6%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Vue基础（三）"><a href="#Vue基础（三）" class="headerlink" title="Vue基础（三）"></a>Vue基础（三）</h1><blockquote><p>安装vue</p><ul><li>安装npm：在nodejs.org下载nodejs（用node -v和npm -v检查；另可用npm install -g npm升级npm）</li><li>使用淘宝镜像（略过）$ npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></li><li>安装vue-cli  :  cnpm install vue-cli -g   //全局安装 vue-cli</li></ul></blockquote><p>安装后，选定文件夹，执行</p><pre class=" language-java"><code class="language-java">npm init webpack<span class="token string">"project-name"</span></code></pre><h2 id="4-组件"><a href="#4-组件" class="headerlink" title="4. 组件"></a>4. 组件</h2><ul><li><p>初识组件：在app.js文件中</p><pre class=" language-java"><code class="language-java">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"gtc"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    template<span class="token operator">:</span>'        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">:</span> 哈哈哈哈哈            <span class="token operator">&lt;</span>button <span class="token annotation punctuation">@ckick</span><span class="token operator">=</span><span class="token string">"change"</span> <span class="token operator">></span>更改<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>'<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//template只能有一个根标签，</span>     data<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span><span class="token punctuation">{</span>             name<span class="token operator">:</span> <span class="token string">"初始"</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span><span class="token punctuation">{</span>        change<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"改变了"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>建立自己的组件：</p><ol><li>在components文件夹下建立Users.vue</li></ol><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"users"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"user in users"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>export <span class="token keyword">default</span><span class="token punctuation">{</span>        name<span class="token operator">:</span><span class="token string">"users"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                users<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"Herry"</span><span class="token punctuation">,</span><span class="token string">"Bucky"</span><span class="token punctuation">,</span><span class="token string">"Jim"</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>srript<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>    <span class="token comment" spellcheck="true">//加了scoped后，可以控制样式的作用范围，不会发生冲突或继承</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><ol start="2"><li><p>注册组件：让我们的组件可以被使用</p><p>2.1 在<strong>main.js</strong>中进行，<strong>全局注册组件（不推荐全局）</strong></p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">import</span> Users from <span class="token string">'./components/Users'</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span>Users<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用时：在App.vue中可以直接使用<users></users>标签</p><p>2.2 局部，在App.vue中</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li></ol></li></ul><pre><code> &lt;script&gt; import Users from &#39;./components/Users&#39; export default{         name:&quot;users&quot;,         data(){             return{             }         },         components:{             &quot;users&quot;:Users    //此处users可省略，起名时不能为关键字         }     } &lt;/srript&gt; ```</code></pre><ul><li><p>组件传值</p><ol><li><p><strong>父组件向子组件传值</strong>：把公共的参数写进父组件，通过自定义属性，向子组件传值，子组件相应的进行接值；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//父组件App.vue中</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>users v<span class="token operator">-</span>bind<span class="token operator">:</span>uzer<span class="token operator">=</span><span class="token string">"users"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>users<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>export <span class="token keyword">default</span><span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>            users<span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"jim"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span>location<span class="token operator">:</span><span class="token string">"shenyang"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"tim"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">,</span>location<span class="token operator">:</span><span class="token string">"shenyang"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"mim"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">,</span>location<span class="token operator">:</span><span class="token string">"shenyang"</span><span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>compoents<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>在子组件中</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>script<span class="token operator">></span>export <span class="token keyword">default</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">'users'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//可以用 props:["uzer"]</span>    props<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取属性uzer的值，所以在调用时，直接用uzer；</span>        <span class="token comment" spellcheck="true">//例如：&lt;li v-for = "user in users">&lt;/li></span>        uzer<span class="token operator">:</span><span class="token punctuation">{</span>            type<span class="token operator">:</span>Array<span class="token punctuation">,</span>            required<span class="token operator">:</span><span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p><strong>子组件向父组件传值：</strong>效果为，子组件间有相同的依赖元素，点击某一子组件，则所有依赖于该元素的值都发生改变；</p><p>子组件：</p><pre class=" language-java"><code class="language-java">methods<span class="token operator">:</span><span class="token punctuation">{</span>    change<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注册</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"titleChanged"</span><span class="token punctuation">,</span><span class="token string">"改变后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>父组件：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>app<span class="token operator">-</span>header v<span class="token operator">-</span>on<span class="token operator">:</span>titleChanged<span class="token operator">=</span><span class="token string">"updateTitle($event)"</span>            v<span class="token operator">-</span>bind<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>header<span class="token operator">></span>         <span class="token operator">&lt;</span>app<span class="token operator">-</span>footer v<span class="token operator">-</span>bind<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>footer<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    export <span class="token keyword">default</span><span class="token punctuation">{</span>             name<span class="token operator">:</span><span class="token string">'App'</span><span class="token punctuation">,</span>             <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">return</span><span class="token punctuation">{</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>             methods<span class="token operator">:</span><span class="token punctuation">{</span>                 <span class="token function">updateTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>             components<span class="token operator">:</span><span class="token punctuation">{</span>                 <span class="token string">"app-header"</span><span class="token operator">:</span>Header<span class="token punctuation">,</span>                 <span class="token string">"app-footer"</span><span class="token operator">:</span>Footer             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ol></li></ul><ul><li><p>生命周期：</p><p>在methods{}后，可添加</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191227162941610.png" alt="钩子函数"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础学习(二)</title>
      <link href="/2019/12/24/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89Web%E9%80%9A%E8%AE%AF/"/>
      <url>/2019/12/24/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89Web%E9%80%9A%E8%AE%AF/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Vue基础（二）"><a href="#Vue基础（二）" class="headerlink" title="Vue基础（二）"></a>Vue基础（二）</h1><h2 id="3-web通讯"><a href="#3-web通讯" class="headerlink" title="3. web通讯"></a>3. web通讯</h2><p>引入ajax（axios）</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.staticfile.org/axios/0.18.0/axios.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote><ul><li><p>get方法</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> info <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      info<span class="token operator">:</span> null    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/try/ajax/json_demo.json'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 请求失败处理</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>网站列表<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span>div    v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"site in info"</span>  <span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> site<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      info<span class="token operator">:</span> null    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/try/ajax/json_demo.json'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sites<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 请求失败处理</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>get传参格式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 直接在 URL 上添加参数 ID=12345</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以通过 params 设置参数：</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    params<span class="token operator">:</span> <span class="token punctuation">{</span>      ID<span class="token operator">:</span> <span class="token number">12345</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>post方法</p><pre class=" language-java"><code class="language-java">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    firstName<span class="token operator">:</span> <span class="token string">'Fred'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 参数 firstName</span>    lastName<span class="token operator">:</span> <span class="token string">'Flintstone'</span>    <span class="token comment" spellcheck="true">// 参数 lastName</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础（一）基本语法</title>
      <link href="/2019/12/23/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/12/23/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Vue基础-一"><a href="#Vue基础-一" class="headerlink" title="Vue基础(一)"></a>Vue基础(一)</h1><h2 id="1-模板语法"><a href="#1-模板语法" class="headerlink" title="1.模板语法"></a>1.模板语法</h2><ul><li><p>v-cloak 解决插值表达式的闪烁问题，但是只会覆盖自己的插值表达式，不会覆盖元素的值；v-text没有闪烁问题，会覆盖元素中原本的内容。</p></li><li><p>v-html 会覆盖元素内容，但是会将本身内容进行html渲染</p><pre class=" language-java"><code class="language-java">v<span class="token operator">-</span>bind<span class="token operator">:</span>href   直接绑定；v<span class="token operator">-</span>html        将需要绑定的值解析（比如字符里含有html标签，可以被解析）</code></pre></li></ul><ul><li><p>v-bind 绑定 ，<strong>属性绑定，用冒号绑定，只能从model层绑定到view层</strong>（即，script下的message改变，div中的数据也随之改变；但是反之不行）</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> ok <span class="token operator">?</span> <span class="token string">'YES'</span> <span class="token operator">:</span> <span class="token string">'NO'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 告诉id，此次要绑定的，是一个变量，名字叫id <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"'list-' + id"</span><span class="token operator">></span>菜鸟教程<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    ok<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    message<span class="token operator">:</span> <span class="token string">'RUNOOB'</span><span class="token punctuation">,</span>    id <span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>v-on 绑定事件，<strong>用冒号绑定</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"reverseMessage"</span><span class="token operator">></span>反转字符串<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'Runoob!'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    reverseMessage<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul><ul><li><p>v-model <strong>双向绑定</strong>，指令只能在 input、select、textarea、checkbox、radio 等<strong>表单</strong>控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//此处，改变v-model文本框的值，&lt;P>的值随之改变</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'Runoob!'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul><ul><li><p>v-if 根据true/false执行，<strong>用等号绑定</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"seen"</span><span class="token operator">></span>现在你看到我了<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    seen<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"type === 'A'"</span><span class="token operator">></span>        A      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"type === 'B'"</span><span class="token operator">></span>        B      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"type === 'C'"</span><span class="token operator">></span>        C      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>        Not A<span class="token operator">/</span>B<span class="token operator">/</span>C      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>      type<span class="token operator">:</span> <span class="token string">'C'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul><ul><li><p>v-for循环</p><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ol<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"site in sites"</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">{</span> site<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>      sites<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'Runoob'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'Google'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'Taobao'</span> <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>  也可以对一个对象迭代：</p><ol><li>如果只有一个值 value，则该值为属性的值，即“菜鸟教程”；</li><li>如果两个值，value仍为值即“菜鸟教程”，key为属性名即“name”;</li><li>如果三个参数，前两个参数同上，第三个为序号索引，即“0”</li></ol><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"value in object"</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(value, key) in object"</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>       <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(value, key, index) in object"</span><span class="token operator">></span>       <span class="token punctuation">{</span><span class="token punctuation">{</span> index <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"n in 10"</span><span class="token operator">></span>       <span class="token punctuation">{</span><span class="token punctuation">{</span> n <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>      object<span class="token operator">:</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'菜鸟教程'</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">'http://www.runoob.com'</span><span class="token punctuation">,</span>        slogan<span class="token operator">:</span> <span class="token string">'学的不仅是技术，更是梦想！'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>  若为集合的遍历：其中item同上面的value，即{ id: 1, name: ‘李斯’ }，而 i 则为序号索引</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button <span class="token annotation punctuation">@click</span><span class="token operator">=</span><span class="token string">"add"</span><span class="token operator">></span>添加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, i) in list"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.id"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>      var vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">{</span>          name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>          newId<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          list<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'李斯'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'吕不韦'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'嬴政'</span> <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//注意这里是unshift</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>newId<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">''</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>  为了解决checkbox等内容的绑定问题，要加key</p><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, i) in list"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.id"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></code></pre></li></ul><ul><li><p>缩写</p><p><strong>v-bind</strong></p><p>Vue.js 为两个最为常用的指令提供了特别的缩写：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 完整语法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a v<span class="token operator">-</span>bind<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 缩写 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><p><strong>v-on 缩写</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 完整语法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"doSomething"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 缩写 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token annotation punctuation">@click</span><span class="token operator">=</span>"doSo</code></pre><p>另：</p><p>当我们给一个比如 props 中，或者 data 中被观测的对象添加一个新的属性的时候，不能直接添加，必须使用 Vue.set 方法。Vue.set 方法用来新增对象的属性。如果要增加属性的对象是响应式的，那该方法可以确保属性被创建后也是响应式的，同时触发视图更新<img src="https://www.runoob.com/wp-content/uploads/2017/10/20170608010237405.png" alt="用Vue.set赋值.png"></p></li></ul><h2 id="2-script-中的方法"><a href="#2-script-中的方法" class="headerlink" title="2. script 中的方法"></a>2. script 中的方法</h2><ul><li><p>插值表达式也可以用来写方法</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token string">'night'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>在<span class="token operator">&lt;</span>script<span class="token operator">></span>中    methods<span class="token operator">:</span><span class="token punctuation">{</span>        hi<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'Good'</span> <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单引号和双引号应该都可以</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>过滤器：过滤器函数接受表达式的值作为第一个参数。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token operator">|</span> capitalize <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'runoob'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  filters<span class="token operator">:</span> <span class="token punctuation">{</span>    capitalize<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>      value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>过滤器可以串联：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token operator">|</span> filterA <span class="token operator">|</span> filterB <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这里，message 是第一个参数，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数</span><span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token operator">|</span> <span class="token function">filterA</span><span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>过滤器可以接收多个表达式，message 和 mesage2 将作为过滤器的前两个参数:</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> message<span class="token punctuation">,</span>message2 <span class="token operator">|</span> <span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span>    message2<span class="token operator">:</span> <span class="token string">'runoob'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  filters<span class="token operator">:</span> <span class="token punctuation">{</span>    capitalize<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>      value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>             value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>value2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>value2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>value2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&lt;br>'</span><span class="token operator">+</span>value3    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//输出 RunoobrunooB aa</span></code></pre></li></ul><ul><li><p>computed</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>声明了一个计算属性 reversedMessage 。    提供的函数将用作属性 vm<span class="token punctuation">.</span>reversedMessage 的 getter 。    vm<span class="token punctuation">.</span>reversedMessage 依赖于 vm<span class="token punctuation">.</span>message，在 vm<span class="token punctuation">.</span>message 发生改变时，vm<span class="token punctuation">.</span>reversedMessage 也会更新。<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>原始字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>计算后反转字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> reversedMessage <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'Runoob!'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算属性的 getter</span>    reversedMessage<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// `this` 指向 vm 实例</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> site <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'Google'</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">'http://www.google.com'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    site<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// getter</span>      get<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// setter</span>      set<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> names<span class="token punctuation">[</span>names<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 调用 setter， vm.name 和 vm.url 也会被对应更新</span>vm<span class="token punctuation">.</span>site <span class="token operator">=</span> <span class="token string">'菜鸟教程 http://www.runoob.com'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'name: '</span> <span class="token operator">+</span> vm<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'url: '</span> <span class="token operator">+</span> vm<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul><ul><li><p>computer 和 method 比较:如下面代码，cnt 是独立于 vm 对象的变量。在使用 reversedMessage 这个计算属性的时候，第一次会执行代码，得到一个值，以后再使用 reversedMessage 这个计算属性，因为 vm 对象没有发生改变，于是界面渲染就直接用这个值，不再重复执行代码。而 reversedMessage2 没有这个缓存，只要用一次，函数代码就执行一次，于是每次返回值都不一样。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>原始字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>计算后反转字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> reversedMessage <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>计算后反转字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> reversedMessage <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>使用方法后反转字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">reversedMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>使用方法后反转字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">reversedMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>var vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'Runoob!'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算属性的 getter</span>    reversedMessage<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// `this` 指向 vm 实例</span>      cnt<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cnt<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    reversedMessage2<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      cnt<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cnt<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//执行结果：</span>原始字符串<span class="token operator">:</span> Runoob<span class="token operator">!</span>计算后反转字符串<span class="token operator">:</span> <span class="token number">2</span><span class="token operator">!</span>boonuR计算后反转字符串<span class="token operator">:</span> <span class="token number">2</span><span class="token operator">!</span>boonuR使用方法后反转字符串<span class="token operator">:</span> <span class="token number">3</span><span class="token operator">!</span>boonuR使用方法后反转字符串<span class="token operator">:</span> <span class="token number">4</span><span class="token operator">!</span>boonuR</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Blog项目（杂要）</title>
      <link href="/2019/12/22/Vue-Bolg%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/12/22/Vue-Bolg%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Vue-Blog项目（杂要）"><a href="#Vue-Blog项目（杂要）" class="headerlink" title="Vue-Blog项目（杂要）"></a>Vue-Blog项目（杂要）</h1><ul><li><p>多选框：此处把多选框设为数组，即categories[]，多选后，数组内会自动保留所选的value值</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"Vue.js"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"blog.categories"</span><span class="token operator">/</span><span class="token operator">></span></code></pre></li></ul><ul><li><p>单选框：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"blog.author"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务SpringCloud</title>
      <link href="/2019/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1SpringCloud/"/>
      <url>/2019/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1SpringCloud/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="微服务SpringCloud"><a href="#微服务SpringCloud" class="headerlink" title="微服务SpringCloud"></a>微服务SpringCloud</h1><h2 id="1-Eureka注册中心"><a href="#1-Eureka注册中心" class="headerlink" title="1.Eureka注册中心"></a>1.Eureka注册中心</h2><h3 id="1-1-注册服务端Eureka-Server"><a href="#1-1-注册服务端Eureka-Server" class="headerlink" title="1.1 注册服务端Eureka Server"></a>1.1 注册服务端Eureka Server</h3><p>引入依赖，其中已经包含了spring-cloud的依赖，无需再引入。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>server<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>相应的配置文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>PORT<span class="token punctuation">:</span><span class="token number">50101</span><span class="token punctuation">}</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> xc<span class="token punctuation">-</span>govern<span class="token punctuation">-</span>center<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 服务注册，是否将自己注册到Eureka服务中</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 服务发现，是否从Eureka中获取注册信息</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># Eureka客户端与Eureka服务端的交互地址，高可用状态配置对方的地址，单机状态配置自己（如果不配置则默认本机8761端口）</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>EUREKA_SERVER<span class="token punctuation">:</span>http<span class="token punctuation">:</span>//eureka02<span class="token punctuation">:</span>50102/eureka/<span class="token punctuation">}</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否开启自我保护，本地测试不开启，实际要开启</span>    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">60000 </span><span class="token comment" spellcheck="true"># 服务注册表清理间隔，默认60*1000毫秒</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>EUREKA_DOMAIN<span class="token punctuation">:</span>eureka01<span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 主机名</span></code></pre><p>其中注意，defaultZone为配置的注册中心的地址（即，需要向哪里进行注册），此处的eureka02对应的是另一配置的主机名（即另一配置的instance-hostname:eureka02），而为了使该主机名能够被正确解析，需要在本机的System32-drivers-etc-host文件中进行配置，如：</p><pre class=" language-yaml"><code class="language-yaml">127.0.0.1    eureka01127.0.0.1    eureka02    </code></pre><p>同时，为了启动的灵活性，可以在启动时配置VM options环境参数，如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>DPORT<span class="token operator">=</span><span class="token number">50101</span> <span class="token operator">-</span>DEUREKA_DOMAIN<span class="token operator">=</span>eureka01 <span class="token operator">-</span>DEUREKA_SERVER<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>eureka02<span class="token operator">:</span><span class="token number">50102</span><span class="token operator">/</span>eureka<span class="token operator">/</span> </code></pre><p>最后，在启动类标识注解@EnableEurekaServer，注明该工程为注册中心服务端。</p><h3 id="1-2-注册客户端-Eureka-Client"><a href="#1-2-注册客户端-Eureka-Client" class="headerlink" title="1.2 注册客户端 Eureka Client"></a>1.2 注册客户端 Eureka Client</h3><p>引入依赖，其中已经包含了spring-cloud的依赖，无需再引入。</p><pre class=" language-java"><code class="language-java">注意，此处依赖不要引错！不是spring<span class="token operator">-</span>cloud<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client ！！！<span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>据说没有spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web会注册失败，未验证。<span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            </code></pre><p>相应的配置文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>EUREKA_SERVER<span class="token punctuation">:</span>http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>50101/eureka/<span class="token punctuation">}</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 将自己的ip注册到eureka服务中</span>    <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>IP_ADDRESS<span class="token punctuation">:</span>127.0.0.1<span class="token punctuation">}</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 指定实例id</span></code></pre><p>最后，在启动类标识注解@EnableEurekaClient，注明该工程为注册中心客户端。此处，推荐使用@EnableDiscoveryClient，异同请自己百度。</p><h2 id="2-Ribbon负载均衡"><a href="#2-Ribbon负载均衡" class="headerlink" title="2 Ribbon负载均衡"></a>2 Ribbon负载均衡</h2><h3 id="2-1-服务端-客户端负载均衡的概念"><a href="#2-1-服务端-客户端负载均衡的概念" class="headerlink" title="2.1 服务端/客户端负载均衡的概念"></a>2.1 服务端/客户端负载均衡的概念</h3><p>服务端负载均衡：负载均衡器维护一份服务列表。硬件设备实现，如F5，Array等；软件实现，如LVS、Nginx等。</p><p>客户端负载均衡：客户端维护一份服务列表，例如，Ribbon从注册中心获取服务列表，Ribbon根据负载均衡算法直接请求到具体的微服务（中间省去了负载均衡服务）。</p><p><strong>两者区别</strong>：服务端负载均衡，是客户端发送请求后的接收端（即服务端）来维护服务列表，先接收信息，再根据一定的算法对列表中的项目（各微服务）进行<strong>转发</strong>，实现服务端负载均衡。客户端负载均衡：是发起者（客户端）自己维护一份服务列表（比如像Ribbon这种，从注册中心获取服务列表），然后再根据算法对列表中的项目（各微服务）进行<strong>调用</strong>。</p><h3 id="2-2-Ribbon负载均衡的实现"><a href="#2-2-Ribbon负载均衡的实现" class="headerlink" title="2.2 Ribbon负载均衡的实现"></a>2.2 Ribbon负载均衡的实现</h3><p>Spring Cloud引入Ribbon配合 restTemplate 实现客户端负载均衡。Java中远程调用的技术有很多，如： webservice、socket、rmi、Apache HttpClient、OkHttp等，互联网项目使用基于http的客户端较多，这里使用OkHttp实现。</p><p>首先，在客户端（发起者）添加Ribbon以及远程调用技术的依赖：由于依赖了spring-cloud-starter-eureka，会自动添加spring-cloud-starter-ribbon依赖。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>ribbon<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp3<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>okhttp<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>然后，添加配置文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>EUREKA_SERVER<span class="token punctuation">:</span>http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>50101/eureka/<span class="token punctuation">}</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>     <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 将自己的ip注册到eureka服务中</span>     <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>IP_ADDRESS<span class="token punctuation">:</span>127.0.0.1<span class="token punctuation">}</span>     <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 指定实例id</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">MaxAutoRetries</span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token comment" spellcheck="true">#最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试</span>  <span class="token key atrule">MaxAutoRetriesNextServer</span><span class="token punctuation">:</span> <span class="token number">3 </span><span class="token comment" spellcheck="true">#切换实例的重试次数</span>  <span class="token key atrule">OkToRetryOnAllOperations</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true">#对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false</span>  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000  </span><span class="token comment" spellcheck="true">#请求连接的超时时间</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">6000 </span><span class="token comment" spellcheck="true">#请求处理的超时时间</span></code></pre><p>为了一会儿实现远程调用，这时要添加相应的Bean，注意因为调用时就要执行负载均衡策略，所以在此添加@LoadBalanced注解。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>LoadBalanced<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>OkHttp3ClientHttpRequestFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OkHttp3ClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>完成单元测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>RestTemplate restTemplate<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRibbon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在注册中心注册的服务名称</span>    String serviceId <span class="token operator">=</span> <span class="token string">"XC-SERVICE-MANAGE-CMS"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行远程调用方法</span>        ResponseEntity<span class="token operator">&lt;</span>CmsPage<span class="token operator">></span> forEntity <span class="token operator">=</span> restTemplate            <span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">"http://"</span> <span class="token operator">+</span> serviceId <span class="token operator">+</span> <span class="token string">"/get"</span><span class="token punctuation">,</span> CmsPage<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CmsPage cmsPage <span class="token operator">=</span> forEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cmsPage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>进行测试：先运行注册中心项目；再运行需要被调用（服务端）的项目，通过不同端口号运行多个实例，观察注册中心，查看这些实例是已经否完成了注册；运行测试类，进行测试。</p><p><strong>注意，添加@LoadBalanced注解后，restTemplate会走LoadBalancerInterceptor拦截器，此拦截器中会通过 RibbonLoadBalancerClient查询服务地址，可以在此类打断点观察每次调用的服务地址和端口，两个cms服务会轮 流被调用。</strong></p><p>最初在写测试代码时一直在思考，“远程调用时的服务列表是怎么从注册中心获取的？”。后来想明白了，要想执行负载均衡，该项目本身必须要通过Eureka在注册中心进行“发现”，也就是application.yml中配置的eureka各参数，这样，自己就和注册中心有了关联，就可以获取到服务列表（很多的 “XC-SERVICE-MANAGE-CMS” 实例）。这时，restTemplate.getForEntity()方法中的http后面的服务名称（serviceId，即  “XC-SERVICE-MANAGE-CMS”） 就会去注册中心寻找相应的地址，完成远程请求。</p><h3 id="2-3-Feign远程调用"><a href="#2-3-Feign远程调用" class="headerlink" title="2.3 Feign远程调用"></a>2.3 Feign远程调用</h3><p>Spring Cloud引入 Feign并且集成了Ribbon实现客户端负载均衡调用。</p><p>首先，引入Feign的依赖，这里因为Feign集成了Ribbon，所以可以把之前的Ribbon依赖注释掉。</p><pre class=" language-javaja"><code class="language-javaja"><dependency>    <groupId>org.springframework.cloud</groupId>    <artifactId>spring-cloud-starter-openfeign</artifactId></dependency></code></pre><p>然后，建立一个Feign的接口，用于远程调用。<strong>注意</strong>，这里接口的url，请求类型，返回值类型都要和正常请求一样，例如@PathVariable(“xxx”) , @RequestParam(“xxx”)都一定要写全。<strong>返回值为复杂对象时，其类型必须有无参构造函数。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>xuecheng<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>cms<span class="token punctuation">.</span>CmsPage<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"XC-SERVICE-MANAGE-CMS"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CmsFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/cms/page/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CmsPage <span class="token function">findCmsPageById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>启动类，<strong>一定要加上 @EnableFeignClients 注解</strong></p><p>最后，编写测试类。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>CmsFeignClient cmsFeignClient<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFeign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CmsPage cmsPage <span class="token operator">=</span> cmsFeignClient<span class="token punctuation">.</span><span class="token function">findCmsPageById</span><span class="token punctuation">(</span><span class="token string">"5a754adf6abb500ad05688d9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cmsPage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>启动顺序和上一节类似。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker建MySql数据库</title>
      <link href="/2019/12/21/Docker%E5%BB%BAMySql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/12/21/Docker%E5%BB%BAMySql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Docker建MySql数据库"><a href="#Docker建MySql数据库" class="headerlink" title="Docker建MySql数据库"></a>Docker建MySql数据库</h1><p>若有mar数据库，先卸载。</p><p>下载mysql镜像</p><pre class=" language-java"><code class="language-java">docker pull mysql<span class="token operator">:</span><span class="token number">5.7</span></code></pre><p>创建并运行容器：</p><ol><li><p>首先，MySQL(5.7.19)的默认配置文件是 /etc/mysql/my.cnf 文件。如果想要自定义配置，建议向 /etc/mysql/conf.d 目录中创建 .cnf 文件。新建的文件可以任意起名，只要保证后缀名是 cnf 即可。新建的文件中的配置项可以覆盖 /etc/mysql/my.cnf 中的配置项。</p><p>具体操作：首先需要创建将要映射到容器中的目录以及.cnf文件，然后再创建容器</p><pre class=" language-java"><code class="language-java"># pwd <span class="token operator">/</span>opt# mkdir <span class="token operator">-</span>p docker_v<span class="token operator">/</span>mysql<span class="token operator">/</span>conf# cd docker_v<span class="token operator">/</span>mysql<span class="token operator">/</span>conf# touch my<span class="token punctuation">.</span>cnf# docker run <span class="token operator">-</span>p <span class="token number">3306</span><span class="token operator">:</span><span class="token number">3306</span> <span class="token operator">--</span>name mysql<span class="token operator">-</span>con <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>docker_v<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token number">123456</span> <span class="token operator">-</span>d mysql<span class="token operator">/</span>mysql<span class="token operator">-</span>server<span class="token operator">:</span><span class="token number">5.7</span></code></pre></li></ol><ol start="2"><li><p>此时是无法连接mysql的，必须修改成允许远程连接</p><pre class=" language-java"><code class="language-java">#通过这个命令进入容器内docker exec <span class="token operator">-</span>it mysql<span class="token operator">-</span>con bash#连接mysqlmysql <span class="token operator">-</span>u root <span class="token operator">-</span>p#修改mysql允许远程连接GRANT ALL PRIVILEGES ON <span class="token operator">*</span><span class="token punctuation">.</span>* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> WITH GRANT OPTIONFLUSH PRIVILEGES</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> docker </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父子类：返回值、传参、转型问题</title>
      <link href="/2019/12/20/%E7%88%B6%E5%AD%90%E7%B1%BB%EF%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%E3%80%81%E4%BC%A0%E5%8F%82%E3%80%81%E8%BD%AC%E5%9E%8B%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/20/%E7%88%B6%E5%AD%90%E7%B1%BB%EF%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%E3%80%81%E4%BC%A0%E5%8F%82%E3%80%81%E8%BD%AC%E5%9E%8B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="父子类：返回值、传参、转型问题"><a href="#父子类：返回值、传参、转型问题" class="headerlink" title="父子类：返回值、传参、转型问题"></a>父子类：返回值、传参、转型问题</h1><ol><li><p>返回值要求是父类，则返回子类也可以；</p></li><li><p>返回值要求是子类，则不能给定父类作为返回；</p></li><li><p>参数需要父类，传子类可以；</p></li><li><p>参数需要子类，传父类，不可以（假设，在方法中调用了子类的方法，而父类就无法调用此方法，所以不可以）</p></li><li><p>向上转型，比较常用。用子类对象（小范围）去实例化父类对象（大范围）</p><pre class=" language-java"><code class="language-java">Father father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>另，抛异常：</p><ol><li><p>无论方法的返回值定义是什么类型，抛异常后的“异常捕捉类”的返回值和方法返回值无关，即，方法返回值要求为某一对象，而异常捕捉后，返回为字符串，并无影响。</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> CmsPageResult <span class="token function">add</span><span class="token punctuation">(</span>CmsPage cmsPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> cmsPage<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span>CommonCode<span class="token punctuation">.</span>FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CmsPageResult</span><span class="token punctuation">(</span>CommonCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><pre><code>   @ResponseBody   @ExceptionHandler(CustomException.class)   public String customException(CustomException e){       LOGGER.error(&quot;catch exception:{}&quot;,e.getMessage());       return &quot;hhahhaha&quot;;</code></pre><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取时间及格式化</title>
      <link href="/2019/12/19/%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/"/>
      <url>/2019/12/19/%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># 获取时间及格式化<p>获取时间：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取当前时间,时间的字符串</span>SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"YYYY/MM/dd/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//SimpleDateFormat simpleDateFormat = new SimpleDateFormat("YYYY-MM-dd HH:mm:ss");</span>String date <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>日期格式化：</p><pre class=" language-java"><code class="language-java">SimpleDateFormat dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date timestamp <span class="token operator">=</span> dateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> sourceAsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 基础 </tag>
            
            <tag> 时间获取 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
