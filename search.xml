<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>建虚拟机后的常规配置</title>
      <link href="/2020/01/26/%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%8E%E7%9A%84%E5%B8%B8%E8%A7%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/26/%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%8E%E7%9A%84%E5%B8%B8%E8%A7%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="建虚拟机后的常规配置"><a href="#建虚拟机后的常规配置" class="headerlink" title="建虚拟机后的常规配置"></a>建虚拟机后的常规配置</h1><ol><li><p>网络配置：</p><pre class=" language-java"><code class="language-java">vi <span class="token operator">/</span>etc<span class="token operator">/</span>sysconfig<span class="token operator">/</span>network<span class="token operator">-</span>scripts<span class="token operator">/</span>ifcfg<span class="token operator">-</span>ens33</code></pre><p>修改最后的onboot属性为yes（按 i 修改，按 Esc 退出编辑，按 :wq 保存并退出）。</p><pre class=" language-java"><code class="language-java"># 若想让ip固定不变，则继续修改ifcfg<span class="token operator">-</span>ens33# 将BOOTPROTO改为<span class="token keyword">static</span>，加一项IPADDR<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">31.132</span># 重启网络服务service network restart#查看inet即可知道本机ipip addr</code></pre></li></ol><ol start="2"><li><p>赋予操作权限：</p><pre class=" language-java"><code class="language-java">chmod <span class="token number">777</span> <span class="token operator">/</span>etc<span class="token operator">/</span>guotianchi</code></pre></li></ol><ol start="3"><li><p>关闭防火墙</p><pre class=" language-java"><code class="language-java">systemctl stop firewalld<span class="token punctuation">.</span>service #停止firewallsystemctl disable firewalld<span class="token punctuation">.</span>service #禁止firewall开机启动firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 安装 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch入门</title>
      <link href="/2020/01/25/Elasticsearch%E5%85%A5%E9%97%A8/"/>
      <url>/2020/01/25/Elasticsearch%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Elasticsearch入门"><a href="#Elasticsearch入门" class="headerlink" title="Elasticsearch入门"></a>Elasticsearch入门</h1><h2 id="1-安装ElasticSearch及插件"><a href="#1-安装ElasticSearch及插件" class="headerlink" title="1 安装ElasticSearch及插件"></a>1 安装ElasticSearch及插件</h2><h3 id="1-1-安装ElasticSearch"><a href="#1-1-安装ElasticSearch" class="headerlink" title="1.1 安装ElasticSearch"></a>1.1 安装ElasticSearch</h3><h3 id="1-2-安装head插件"><a href="#1-2-安装head插件" class="headerlink" title="1.2 安装head插件"></a>1.2 安装head插件</h3><p>启动head命令，在当前文件夹内，cmd。然后输入npm start run ，即可在localhost:9100访问</p><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2 快速入门"></a>2 快速入门</h2><h3 id="2-1-建立索引库，加索引，加文档，完成简单搜索"><a href="#2-1-建立索引库，加索引，加文档，完成简单搜索" class="headerlink" title="2.1 建立索引库，加索引，加文档，完成简单搜索"></a>2.1 建立索引库，加索引，加文档，完成简单搜索</h3><p>利用postman建立索引库，通过 <a href="http://localhost:9200/xc_course" target="_blank" rel="noopener">http://localhost:9200/xc_course</a> 接口的PUT请求，发送json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"settings"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"number_of_shards"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>    //分片数            <span class="token property">"number_of_replicas"</span><span class="token operator">:</span><span class="token number">0</span>    //副本数        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后，建立映射，通过 <a href="http://localhost:9200/xc_course/doc/_mapping" target="_blank" rel="noopener">http://localhost:9200/xc_course/doc/_mapping</a> 接口的PUT请求，发送json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"description"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"studymodel"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建文档，通过 <a href="http://localhost:9200/xc_course/doc/12345678" target="_blank" rel="noopener">http://localhost:9200/xc_course/doc/12345678</a>  接口的 PUT/POST 请求，发送json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"BootStrap"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span><span class="token string">"我一会要看电影放松一下心情，偷懒3小时"</span><span class="token punctuation">,</span>    <span class="token property">"studymodel"</span><span class="token operator">:</span><span class="token string">"201001"</span><span class="token punctuation">}</span></code></pre><p>简单搜索： <a href="http://localhost:9200/xc_course/doc/12345678" target="_blank" rel="noopener">http://localhost:9200/xc_course/doc/12345678</a> 接口的 GET 方法；</p><p>​                    <a href="http://localhost:9200/xc_course/doc/_search" target="_blank" rel="noopener">http://localhost:9200/xc_course/doc/_search</a> 接口的 GET 方法；</p><p>​                    <a href="http://localhost:9200/xc_course/doc/_search?q=name:购物车" target="_blank" rel="noopener">http://localhost:9200/xc_course/doc/_search?q=name:购物车</a> 接口的 GET 方法；</p><h2 id="3-IK分词器"><a href="#3-IK分词器" class="headerlink" title="3 IK分词器"></a>3 IK分词器</h2><p>安装ik分词器，利用 <a href="http://localhost:9200/_analyze" target="_blank" rel="noopener">http://localhost:9200/_analyze</a> 接口进行分词测试：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"我一会要看电影放松一下心情，偷懒3小时"</span><span class="token punctuation">,</span>    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_smart"</span>   //如果不加analyzer，则使用es自带分词器。此处还有ik_max_word 细粒度比 ik_smart 高<span class="token punctuation">}</span></code></pre><p>自定义分词器。<strong>在ElasticSearch文件夹的plungs目录下的ik改配置！！！</strong></p><p>设置分词器时，索引用 ik_max_word 细颗粒度（分的越细，越容易将文章暴露出去，方便自己被搜索），搜索用 ik_smart 粗颗粒度（分的越粗，匹配的会更少，更精确）。</p><p><strong>字段类型</strong>：</p><p><strong>text</strong> 是文本字段，可以被全文检索,可以分词。</p><pre class=" language-json"><code class="language-json"><span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>    <span class="token property">"analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>    <span class="token property">"search_analyzer"</span> <span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">}</span></code></pre><p><strong>keyword是精确匹配，不被分词！</strong> </p><p><strong>data</strong> 是日期类型，通过format设置日期格式。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span><span class="token punctuation">,</span>                <span class="token property">"format"</span><span class="token operator">:</span> "yyyy‐MM‐dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss||yyyy‐MM‐dd"               <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以后再建立映射时：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>       <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                        <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>                                                           <span class="token property">"search_analyzer"</span><span class="token operator">:</span><span class="token string">"ik_smart"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                        <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>                                                           <span class="token property">"search_analyzer"</span><span class="token operator">:</span><span class="token string">"ik_smart"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token property">"pic"</span><span class="token operator">:</span><span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>                        <span class="token property">"index"</span><span class="token operator">:</span><span class="token boolean">false</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token property">"studymodel"</span><span class="token operator">:</span><span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数值类型：尽量选择范围小的类型，提高搜索效率。对于浮点数尽量用比例因子，比如价格单位是“元”，我们将比例因子设为100，这就会按照“分”来存储。</p><pre class=" language-json"><code class="language-json"><span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"scaled_float"</span><span class="token punctuation">,</span>    <span class="token property">"scaling_factor"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS搭建</title>
      <link href="/2020/01/20/FastDFS%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/01/20/FastDFS%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="FastDFS搭建"><a href="#FastDFS搭建" class="headerlink" title="FastDFS搭建"></a>FastDFS搭建</h1><ol><li><p>安装VMware虚拟机，选择CentOS7虚拟机。其中在安装CentOS时，最好选择相关工具及所用的环境。</p></li><li><p><strong>tracker的安装</strong>：需要 FastDFS_v5.05.tar.gz 安装包。</p><p>首先，安装 FastDFS需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，需要安装</p><pre class=" language-java"><code class="language-java">gcc：yum install gcc<span class="token operator">-</span>c<span class="token operator">++</span> </code></pre><p>FastDFS依赖libevent库，需要安装：</p><pre class=" language-java"><code class="language-java">yum <span class="token operator">-</span>y install libevent</code></pre><p>同时需要libfastcommon提供的基础库，需要 libfastcommonV1.0.7.tar.gz安装包，将其拷贝至/usr/local/下 </p><pre class=" language-java"><code class="language-java">cd <span class="token operator">/</span>usr<span class="token operator">/</span>local tar <span class="token operator">-</span>zxvf libfastcommonV1<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz cd libfastcommon<span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">7</span> <span class="token punctuation">.</span>/make<span class="token punctuation">.</span>sh <span class="token punctuation">.</span>/make<span class="token punctuation">.</span>sh install </code></pre><p>注意：libfastcommon安装好后会自动将库文件拷贝至/usr/lib64下，由于FastDFS程序引用usr/lib目录所以需要将/usr/lib64下的库文件拷贝至/usr/lib下。 要拷贝的文件：libfastcommon.so </p><p>最后，<strong>tracker的编译与安装</strong>：将FastDFS_v5.05.tar.gz拷贝至/usr/local/下</p><pre class=" language-java"><code class="language-java">tar <span class="token operator">-</span>zxvf FastDFS_v5<span class="token number">.05</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz cd FastDFS <span class="token punctuation">.</span>/make<span class="token punctuation">.</span>sh 编译 <span class="token punctuation">.</span>/make<span class="token punctuation">.</span>sh install  安装 </code></pre><p>安装成功后，将安装目录下的conf文件夹中相关文件拷贝到/etc/fdfs/下，涉及文件：client.conf , http.conf , mime.types , storage.conf , storage_ids.conf , tracker.conf </p><p>另，<strong>相关配置</strong>：安装成功后进入/etc/fdfs目录，拷贝一份新的tracker配置文件。</p><pre class=" language-java"><code class="language-java">cp tracker<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>sample tracker<span class="token punctuation">.</span>conf #修改 tracker<span class="token punctuation">.</span>confvi tracker<span class="token punctuation">.</span>conf</code></pre><p>base_path=/home/yuqing/fastdfs  改为 :  base_path=/home/fastdfs<br>http.server_port  改为: 80</p><p>修改配置后，在home下创建相应的文件夹fastdfs</p><pre class=" language-java"><code class="language-java">#启动tracker，成功后会在home<span class="token operator">/</span>fastdfs<span class="token operator">/</span>目录下生成两个目录：data<span class="token punctuation">,</span>logs<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>fdfs_trackerd <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span>tracker<span class="token punctuation">.</span>conf restart</code></pre></li><li><p>storage的安装和配置</p><p>由于上面已经安装过FastDFS，这里只需要配置storage就好了</p><p>切换目录到： /etc/fdfs/ 目录下，</p><pre><code># 拷贝一份新的storage配置文件cp storage.conf.sample storage.conf# 修改storage.confvi storage.confgroup_name=group1 #配置组名base_path=/home/yuqing/fastdfs    改为:  base_path=/home/fastdfs#store存放文件的位置(store_path)store_path0=/home/yuqing/fastdfs  改为： store_path0=/home/fdfs_storage #如果有多个挂载磁盘则定义多个store_path，如下#store_path1=.....#store_path2=......#配置tracker服务器:IPtracker_server=192.168.31.132:22122#如果有多个则配置多个tracker#tracker_server=192.168.101.4:22122#配置http端口http.server_port=88</code></pre><p> 创建 /home/fdfs_storage 目录</p><pre><code>mkdir /home/fdfs_storage</code></pre><p>启动storage， 运行命令如下：</p><pre><code>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</code></pre><p>启动完成后进入 /home/fdfs_storage/data 目录下，可以看到很多文件夹（00，07…）</p></li><li><p>使用FastDFS自带的工具测试：</p><p>切换目录到 /etc/fdfs 目录下，</p><pre class=" language-java"><code class="language-java"># 拷贝一份新的client配置文件cp client<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>sample client<span class="token punctuation">.</span>conf# 修改client<span class="token punctuation">.</span>confvi client<span class="token punctuation">.</span>confbase_path<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>fastdfstracker_server<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">31.132</span><span class="token operator">:</span><span class="token number">22122</span></code></pre><p>此时可以对某文件进行上传测试，例如在/home/guotianchi/下有一个文件tx.txt</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>fdfs_test <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span>client<span class="token punctuation">.</span>conf upload <span class="token operator">/</span>home<span class="token operator">/</span>guotianchi<span class="token operator">/</span>tx<span class="token punctuation">.</span>txt</code></pre><p>可以查看成功日志：图中的文件地址：<a href="http://192.168.172.20/group1/M00/00/00/wKisFFpBG9eAHaQvAAAWKd1hQR4158_big.jpg" target="_blank" rel="noopener">http://192.168.172.20/group1/M00/00/00/wKisFFpBG9eAHaQvAAAWKd1hQR4158_big.jpg</a> </p><p>对应storage服务器上的 /home/fdfs_storage/data/00/00/wKisFFpBG9eAHaQvAAAWKd1hQR4158_big.jpg文件；</p><p>由于现在还没有和nginx整合无法使用http下载。</p><p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F%E6%97%A5%E5%BF%97.png" alt=""></p></li><li><p>编写运行脚本。通过 ./test.sh 一键启动</p><p>tracker和storage的运行需要命令行启动，此时可以选择将其命令行编写为脚本，进行一键启动。编辑 test.sh 文件，文件中插入相关命令。</p><pre class=" language-java"><code class="language-java">#<span class="token operator">!</span> <span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>fdfs_trackerd <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span>tracker<span class="token punctuation">.</span>conf restart<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>fdfs_storaged <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span>storage<span class="token punctuation">.</span>conf restart</code></pre><p>因为在windows系统下操作，所以会使格式发生错误（换行多了/r），所以可以用命令去除多余字符。</p><pre class=" language-java"><code class="language-java"># 去除多余字符sed <span class="token operator">-</span>i <span class="token string">'s/\r$//'</span> test<span class="token punctuation">.</span>sh# 通过 <span class="token punctuation">.</span>/test<span class="token punctuation">.</span>sh 一键启动<span class="token punctuation">.</span>/test<span class="token punctuation">.</span>sh# 查看运行状态ps aux<span class="token operator">|</span>grep dfs</code></pre></li></ol><ol start="6"><li><p>FastDFS和nginx整合</p><p>6.1 每个<strong>tracker上安装nginx</strong>，为了做负载均衡及实现高可用。如果只有一台tracker，可以不用配置nginx，一个tracker对应多个storage，通过nginx对storage负载均衡；</p><p>6.2 <strong>storage上安装nginx</strong></p><p>（1）上传 fastdfs-nginx-module_v1.16.tar.gz 到Centos服务器上；</p><p>（2）解压 fastdfs-nginx-module_v1.16.tar.gz 到 /usr/local目录下；</p><pre class=" language-java"><code class="language-java">tar <span class="token operator">-</span>zxvf fastdfs<span class="token operator">-</span>nginx<span class="token operator">-</span>module_v1<span class="token number">.16</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">-</span>C <span class="token operator">/</span>usr<span class="token operator">/</span>local</code></pre><p>（3）切换目录到： /usr/local/fastdfs-nginx-module/src/ 目录下</p><pre class=" language-java"><code class="language-java">cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>fastdfs<span class="token operator">-</span>nginx<span class="token operator">-</span>module<span class="token operator">/</span>src<span class="token operator">/</span></code></pre><p>（4）修改config文件，将文件中的所有 /usr/local/ 路径改为 /usr/</p><p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E4%BF%AE%E6%94%B9usr%E8%B7%AF%E5%BE%84.png" alt=""></p><p>修改完成后：</p><p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E4%BF%AE%E6%94%B9usr%E8%B7%AF%E5%BE%84%E5%AE%8C%E6%88%90%E5%90%8E.png" alt=""></p><p>（5）将fastdfs-nginx-module/src下的mod_fastdfs.conf拷贝至/etc/fdfs/下</p><pre class=" language-java"><code class="language-java">cp mod_fastdfs<span class="token punctuation">.</span>conf <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span></code></pre><p>（6）并修改 /etc/fdfs/mod_fastdfs.conf 的内容；<strong>vi /etc/fdfs/mod_fastdfs.conf</strong></p><p> base_path=/tmp 修改为 base_path=/home/fastdfs</p><pre class=" language-java"><code class="language-java">base_path<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>fastdfstracker_server<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">31.132</span><span class="token operator">:</span><span class="token number">22122</span> #tracker_server<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">172.20</span><span class="token operator">:</span><span class="token number">22122</span> #<span class="token punctuation">(</span>多个tracker配置多行<span class="token punctuation">)</span>url_have_group_name<span class="token operator">=</span><span class="token boolean">true</span>        #url中包含group名称store_path0<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>fdfs_storage  #指定文件存储路径（上面配置的store路径）</code></pre><p>（7）将libfdfsclient.so拷贝至/usr/lib下</p><pre class=" language-java"><code class="language-java">cp <span class="token operator">/</span>usr<span class="token operator">/</span>lib64<span class="token operator">/</span>libfdfsclient<span class="token punctuation">.</span>so <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span></code></pre><p>（8）创建nginx/client目录</p><pre class=" language-java"><code class="language-java">mkdir <span class="token operator">-</span>p <span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>client</code></pre><p>6.3 <strong>nginx的安装</strong></p><p>（1）上传 nginx-1.8.0.tar.gz 到Centos服务器上；注意，此处不要用nginx的zip包，那是个坑啊。</p><p>（2）解压 nginx-1.8.0.tar.gz 到 /usr/local目录下；</p><pre><code>tar -zxvf nginx-1.14.12.tar.gz -C /usr/local/</code></pre><p>（3）安装nginx的依赖库</p><pre><code>yum install pcreyum install pcre-develyum install zlibyum install zlib-develyum install opensslyum install openssl-devel</code></pre><p>（4）进入nginx解压的目录下：<strong>cd /usr/local/nginx-1.14.12/</strong></p><p>（5）加入模块命令配置，输入以下：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/configure \<span class="token operator">--</span>prefix<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx \<span class="token operator">--</span>pid<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>nginx<span class="token operator">/</span>nginx<span class="token punctuation">.</span>pid \<span class="token operator">--</span>lock<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>lock<span class="token operator">/</span>nginx<span class="token punctuation">.</span>lock \<span class="token operator">--</span>error<span class="token operator">-</span>log<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log \<span class="token operator">--</span>http<span class="token operator">-</span>log<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log \<span class="token operator">--</span>with<span class="token operator">-</span>http_gzip_static_module \<span class="token operator">--</span>http<span class="token operator">-</span>client<span class="token operator">-</span>body<span class="token operator">-</span>temp<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>client \<span class="token operator">--</span>http<span class="token operator">-</span>proxy<span class="token operator">-</span>temp<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>proxy \<span class="token operator">--</span>http<span class="token operator">-</span>fastcgi<span class="token operator">-</span>temp<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>fastcgi \<span class="token operator">--</span>http<span class="token operator">-</span>uwsgi<span class="token operator">-</span>temp<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>uwsgi \<span class="token operator">--</span>http<span class="token operator">-</span>scgi<span class="token operator">-</span>temp<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>temp<span class="token operator">/</span>nginx<span class="token operator">/</span>scgi \<span class="token operator">--</span>add<span class="token operator">-</span>module<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>fastdfs<span class="token operator">-</span>nginx<span class="token operator">-</span>module<span class="token operator">/</span>src</code></pre><p><strong>注意：上边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录；</strong></p><p>（6）编译并安装，安装后可以查看/usr/local/nginx 下，有conf,html,sbin文件夹生成</p><pre class=" language-java"><code class="language-java">make <span class="token operator">&amp;&amp;</span> make install</code></pre><p>（7）拷贝配置文件到 /etc/fdfs 下；</p><pre class=" language-java"><code class="language-java">cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>FastDFS<span class="token operator">/</span>confcp http<span class="token punctuation">.</span>conf mime<span class="token punctuation">.</span>types <span class="token operator">/</span>etc<span class="token operator">/</span>fdfs<span class="token operator">/</span></code></pre><p>（8）修改nginx配置文件</p><p><img src="https://images2017.cnblogs.com/blog/1107037/201712/1107037-20171227204412972-1320764618.png" alt="img"></p><pre class=" language-java"><code class="language-java"># 创建logs目录cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>mkdir <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>logsvim nginx<span class="token punctuation">.</span>conf</code></pre><p>做如下的修改：</p><p>　　<img src="https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180106211140565-2088673686.png" alt="img"></p><p>　　<img src="https://images2017.cnblogs.com/blog/1107037/201712/1107037-20171227211338675-1973886058.png" alt="img"></p><p><strong>说明</strong>：</p><p>　　(a) server_name为本虚拟机ip，我的是192.168.31.132；</p><p>　　(b) location /group1/M00/：group1为nginx 服务FastDFS的分组名称，M00是FastDFS自动生成编号，            对应store_path0=/home/fdfs_storage，如果FastDFS定义store_path1，这里就是M01</p></li></ol><pre><code>（9）nginx的启动</code></pre><pre class=" language-java"><code class="language-java">   cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>   <span class="token punctuation">.</span>/nginx   # 查询nginx进程   ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep nginx</code></pre><p>   <img src="https://images2017.cnblogs.com/blog/1107037/201712/1107037-20171227211548191-1498752184.png" alt="img"></p><p>   6.4 <strong>浏览器测试</strong></p><p>   在浏览器输入地址：<a href="http://192.168.31.132/group1/M00/00/00/xxxxxxxxxxxxxx.png" target="_blank" rel="noopener">http://192.168.31.132/group1/M00/00/00/xxxxxxxxxxxxxx.png</a></p><ol start="7"><li><p>杀进程。linux解决nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</p><pre class=" language-java"><code class="language-java">#查看端口netstat <span class="token operator">-</span>ntlp# 看到nginx<span class="token operator">:</span>master 前面的端口号 <span class="token number">123</span>kill <span class="token number">123</span></code></pre></li><li><p>fastdfs 和 nginx 的自启动</p><p>编辑 /etc/rc.d/rc.local 文件，增加启动项；</p><p>8.1 编辑文件</p><pre class=" language-java"><code class="language-java">vi <span class="token operator">/</span>etc<span class="token operator">/</span>rc<span class="token punctuation">.</span>d<span class="token operator">/</span>rc<span class="token punctuation">.</span>local</code></pre><p>8.2 增加如下：</p><pre class=" language-java"><code class="language-java"></code></pre><h1 id="fastdfs-start"><a href="#fastdfs-start" class="headerlink" title="fastdfs start"></a>fastdfs start</h1><p>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart<br>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</p><h1 id="nginx-start"><a href="#nginx-start" class="headerlink" title="nginx start"></a>nginx start</h1><p>/usr/local/nginx/sbin/nginx</p><pre><code>![img](https://images2017.cnblogs.com/blog/1107037/201801/1107037-20180106211839253-1864240580.png)3、在centos7中, /etc/rc.d/rc.local 文件的权限被降低了，需要给rc.local 文件增加可执行的权限；```javachmod +x /etc/rc.d/rc.local</code></pre></li></ol><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> FastDFS </tag>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker上搭建自己的Git管理平台</title>
      <link href="/2020/01/09/Docker%E4%B8%8A%E6%90%AD%E5%BB%BAGogs/"/>
      <url>/2020/01/09/Docker%E4%B8%8A%E6%90%AD%E5%BB%BAGogs/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Docker上搭建自己的Git管理平台"><a href="#Docker上搭建自己的Git管理平台" class="headerlink" title="Docker上搭建自己的Git管理平台"></a>Docker上搭建自己的Git管理平台</h1><h2 id="初识docker"><a href="#初识docker" class="headerlink" title="初识docker"></a>初识docker</h2><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre class=" language-java"><code class="language-java"># 查找centos镜像docker search centos# 下载centos镜像sudo docker pull docker<span class="token punctuation">.</span>io<span class="token operator">/</span>centos<span class="token operator">:</span>latest# 查看镜像sudo docker image ls# 删除镜像sudo docker image rm <span class="token number">123456789</span># 若有容器<span class="token punctuation">(</span>container<span class="token punctuation">)</span>在引用此镜像会造成删除失败，则先删除容器# 先查看正在运行的container，再根据container的id删除docker ps <span class="token operator">-</span>adocker rm <span class="token function">123456</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span>docker image rm <span class="token function">123456789</span><span class="token punctuation">(</span>imageId<span class="token punctuation">)</span># 创建容器并进入其中，参数说明<span class="token operator">:</span> <span class="token operator">-</span>t分配一个伪终端并绑定到容器的标准输入，<span class="token operator">-</span>i 让容器的标准输入保持打开sudo docker run <span class="token operator">-</span>t <span class="token operator">-</span>i <span class="token operator">--</span>name guo<span class="token operator">-</span>centos docker<span class="token punctuation">.</span>io<span class="token operator">/</span>centos<span class="token operator">:</span>latest <span class="token operator">/</span>bin<span class="token operator">/</span>bash#  退出容器exit# 删除容器sudo docker rm guo<span class="token operator">-</span>centos# 查看所有容器sudo docker ps <span class="token operator">-</span>a# 查看当前运行的容器sudo docker ps# 启动容器sudo docker start guo<span class="token operator">-</span>centos# 停止容器sudo docker stop guo<span class="token operator">-</span>centos# 进入容器环境sudo docker attach guo<span class="token operator">-</span>centos#容器内部发送指令sudo docker exec guo<span class="token operator">-</span>centos touch xyz<span class="token punctuation">.</span>txt</code></pre><h2 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h2><pre class=" language-java"><code class="language-java"># 将guo<span class="token operator">-</span>centos容器内的xyz<span class="token punctuation">.</span>txt文件拷贝到根目录下sudo docker cp guo<span class="token operator">-</span>centos<span class="token operator">:</span>xyz<span class="token punctuation">.</span>txt <span class="token punctuation">.</span>/# 将自定义容器发布为镜像，参数说明：<span class="token operator">-</span>a为作者，<span class="token operator">-</span>m为提交信息sudo docker commit <span class="token operator">-</span>a <span class="token string">"GTC"</span> <span class="token operator">-</span>m <span class="token string">"add txt"</span> guo<span class="token operator">-</span>centos guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span># 基于新建的镜像创建容器，生成的新容器，包含镜像内曾经有的xyz<span class="token punctuation">.</span>txtsudo docker run <span class="token operator">-</span>t <span class="token operator">-</span>i <span class="token operator">--</span>name another<span class="token operator">-</span>centos guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span> <span class="token operator">/</span>bin<span class="token operator">/</span>bash# 查看镜像信息sudo docker history guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span># 查看容器内变动日志sudo docker diff guo<span class="token operator">-</span>centos  # 查看镜像的详细信息sudo docker inspect zhaoolee<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span> # 查看容器的详细信息sudo docker inspect zhaoolee<span class="token operator">-</span>centos</code></pre><h2 id="私有库的创建"><a href="#私有库的创建" class="headerlink" title="私有库的创建"></a>私有库的创建</h2><pre class=" language-java"><code class="language-java"># <span class="token number">1</span><span class="token punctuation">.</span>下载私有仓库注册服务器的镜像sudo docker pull registry<span class="token operator">:</span>latest# <span class="token number">2</span><span class="token punctuation">.</span>创建一个注册服务器容器<span class="token punctuation">,</span>参数说明 <span class="token operator">-</span>d容器在后端运行<span class="token punctuation">,</span> <span class="token operator">-</span>p <span class="token number">5000</span><span class="token operator">:</span><span class="token number">5000</span>在容器的<span class="token number">5000</span>端口运行并映射到外部系统的<span class="token number">5000</span>端口<span class="token punctuation">,</span> <span class="token operator">--</span>name server<span class="token operator">-</span>registry容器命名为guo<span class="token operator">-</span>server<span class="token operator">-</span>registry<span class="token punctuation">,</span> <span class="token operator">-</span>v <span class="token operator">/</span>tmp<span class="token operator">/</span>registry <span class="token operator">/</span>tmp<span class="token operator">/</span>registry把宿主机的目录<span class="token operator">/</span>tmp<span class="token operator">/</span>registry挂载到容器目录<span class="token operator">/</span>tmp<span class="token operator">/</span>registrysudo docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">5000</span><span class="token operator">:</span><span class="token number">5000</span> <span class="token operator">--</span>name guo<span class="token operator">-</span>server<span class="token operator">-</span>registry <span class="token operator">-</span>v <span class="token operator">/</span>tmp<span class="token operator">/</span>registry<span class="token operator">:</span><span class="token operator">/</span>tmp<span class="token operator">/</span>registry docker<span class="token punctuation">.</span>io<span class="token operator">/</span>registry<span class="token operator">:</span>latest# <span class="token number">3</span><span class="token punctuation">.</span>为本地镜像添加标签，并将其归入本地仓库sudo docker tag guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span> localhost<span class="token operator">:</span><span class="token number">5000</span><span class="token operator">/</span>guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span># 将被标记的本地镜像推到库中sudo docker push localhost<span class="token operator">:</span><span class="token number">5000</span><span class="token operator">/</span>guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span># <span class="token number">4</span><span class="token punctuation">.</span>使用sudo docker pull <span class="token number">143</span><span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token operator">:</span><span class="token number">5000</span><span class="token operator">/</span>guo<span class="token operator">-</span>centos<span class="token operator">:</span><span class="token number">0.1</span></code></pre><h2 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h2><p>如果已有老版本docker，先查看已安装的docker：</p><pre class=" language-java"><code class="language-java">yum list installed <span class="token operator">|</span> grep docker</code></pre><p>可以看见已经安装的：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-2c9c02c911a4cdf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>将其卸载，以防冲突：</p><pre class=" language-java"><code class="language-java">yum <span class="token operator">-</span>y remove  containerd<span class="token punctuation">.</span>io<span class="token punctuation">.</span>x86_64  docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>x86_64  docker<span class="token operator">-</span>ce<span class="token operator">-</span>cli<span class="token punctuation">.</span>x86_64</code></pre><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><pre class=" language-java"><code class="language-java"># 通过yum源安装dockeryum <span class="token operator">-</span>y install docker# 启动dockersystemctl start docker# 开机自启sudo systemctl enable docker</code></pre><p>也可以通过“宝塔”进行快速安装设置。</p><h2 id="下载gogs的镜像"><a href="#下载gogs的镜像" class="headerlink" title="下载gogs的镜像"></a>下载gogs的镜像</h2><pre class=" language-java"><code class="language-java">docker pull gogs<span class="token operator">/</span>gogs</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/19860184-2fa1c8d2d6f20b73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="创建gogs的储存文件夹"><a href="#创建gogs的储存文件夹" class="headerlink" title="创建gogs的储存文件夹"></a>创建gogs的储存文件夹</h2><pre class=" language-java"><code class="language-java">mkdir <span class="token operator">-</span>p <span class="token operator">/</span>var<span class="token operator">/</span>gogs</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/19860184-f27f7c6125595a8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="运行镜像，产生容器，映射端口"><a href="#运行镜像，产生容器，映射端口" class="headerlink" title="运行镜像，产生容器，映射端口"></a>运行镜像，产生容器，映射端口</h2><pre class=" language-java"><code class="language-java">docker run <span class="token operator">--</span>name<span class="token operator">=</span>gogs <span class="token operator">-</span>p <span class="token number">10022</span><span class="token operator">:</span><span class="token number">22</span> <span class="token operator">-</span>p <span class="token number">10080</span><span class="token operator">:</span><span class="token number">3000</span> <span class="token operator">-</span>v <span class="token operator">/</span>var<span class="token operator">/</span>gogs<span class="token operator">:</span><span class="token operator">/</span>data gogs<span class="token operator">/</span>gogs</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/19860184-c526d3613651048a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="对数据库、端口、账户进行最后的配置"><a href="#对数据库、端口、账户进行最后的配置" class="headerlink" title="对数据库、端口、账户进行最后的配置"></a>对数据库、端口、账户进行最后的配置</h2><p>以下的配置我忘记截图了，本章两张图片来源简书@zhaoolee</p><p>数据库的简单配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-5637b909c88235d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gogs数据库.png"></p><p>仓库的端口、账户配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-55a640eab8ed9627.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gogs配置.png"></p><p>至此，已经完成了自己的git管理库！</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-e942cb08d0d1a308.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git-gogs成果图.png"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> docker </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>freemarker基础</title>
      <link href="/2020/01/03/freemarker%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/01/03/freemarker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="freemarker基础"><a href="#freemarker基础" class="headerlink" title="freemarker基础"></a>freemarker基础</h1><ol><li><p>注释,&lt;#–    –&gt;</p></li><li><p>插值，${name}</p></li><li><p>FTL指令：</p><pre class=" language-html"><code class="language-html">遍历list:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">students</span> <span class="token attr-name">as</span> <span class="token attr-name">stu</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${stu_index}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${stu.name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    集合students的大小：${students?size}map:    方法1：直接取对象        姓名：${stuMap['stu1'].name}    方法2：直接取key（把对象当作key）        姓名：${stuMap.stu1.name}    方法3：取出所有key，用list遍历        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">stuMap?key</span> <span class="token attr-name">as</span> <span class="token attr-name">k</span><span class="token punctuation">></span></span>            姓名：${stuMap[k].name}  此处不能用方法2的“.”        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span></code></pre></li></ol><ol start="4"><li><p>if</p><pre class=" language-html"><code class="language-html">&lt;td &lt;#if stu.name == '小明'>style="background:red;"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#if</span><span class="token punctuation">></span></span>>ahha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>注：大于比较用 gt空值处理,方法1：        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#if</span> <span class="token attr-name">stus??</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">stus</span> <span class="token attr-name">as</span> <span class="token attr-name">s</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#if</span><span class="token punctuation">></span></span>    方法2：缺省值，如果stuhuofirst或name为空，则显示‘’        ${(stu.first.name)!''}</code></pre></li></ol><ol start="5"><li><p>日期格式化</p><pre class=" language-html"><code class="language-html">年月日：${today?date}时分秒：${today?time}日期和时间：${today?datetime}自定义格式化：${today?string("yyyy年MM月dd日")}</code></pre></li></ol><ol start="6"><li><p>数字转字符串</p><pre class=" language-html"><code class="language-html">${point?c}</code></pre></li></ol><ol start="7"><li><p>json转对象</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#assign</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>bank:<span class="token punctuation">'</span>银行<span class="token punctuation">'</span>,<span class="token punctuation">'</span>account<span class="token punctuation">'</span>:<span class="token punctuation">'</span>123456<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#assign</span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span>text?eval</span> <span class="token punctuation">/></span></span>开户行：${data.bank}</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 基础 </tag>
            
            <tag> freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实现文章点赞</title>
      <link href="/2019/12/27/SpringBoot%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%82%B9%E8%B5%9E/"/>
      <url>/2019/12/27/SpringBoot%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%82%B9%E8%B5%9E/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="SpringBoot实现文章点赞"><a href="#SpringBoot实现文章点赞" class="headerlink" title="SpringBoot实现文章点赞"></a>SpringBoot实现文章点赞</h1><p>点赞这种需求还算是很常见的，其大体流程也是很容易想明白的。因为类似于点赞这种操作，如果用户比较闲，就是一顿点…点一下我就操作一下数据库，取消一下我再操作一下数据库……所以具体实现思路是：</p><ul><li>用户点“点赞”按钮</li><li>redis存储这个“赞”</li><li>用户取消“赞”</li><li>redis随之取消“赞”</li><li>一定时间后，系统将这些“赞”做持久化</li></ul><p>思路是这样的，具体实现也是比较容易的：</p><ol><li><p>redis缓存相关</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>         <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>         <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>在maven引入依赖后，对redis进行相关配置</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnMissingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringRedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>UnknownHostException<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>            RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span>            <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        Jackson2JsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>StringRedisTemplate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> StringRedisTemplate <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span>            RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span>            <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        StringRedisTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件也要写一下：</p><pre class=" language-java"><code class="language-java">  spring<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>host<span class="token operator">=</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>  spring<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>port<span class="token operator">:</span> <span class="token number">6379</span></code></pre></li></ol><ol start="2"><li><p>定时任务相关</p><p>一样的，引入定时的依赖：</p><pre class=" language-java"><code class="language-java">       <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定时任务<span class="token operator">--</span><span class="token operator">></span>       <span class="token operator">&lt;</span>dependency<span class="token operator">></span>           <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>           <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>quartz<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>并配置：</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>LikeTask<span class="token punctuation">;</span>   <span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>*<span class="token punctuation">;</span>   <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>   <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Configuration</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzConfig</span> <span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LIKE_TASK_IDENTITY <span class="token operator">=</span> <span class="token string">"LikeTaskQuartz"</span><span class="token punctuation">;</span>       <span class="token annotation punctuation">@Bean</span>       <span class="token keyword">public</span> JobDetail <span class="token function">quartzDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>LikeTask<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>LIKE_TASK_IDENTITY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Bean</span>       <span class="token keyword">public</span> Trigger <span class="token function">quartzTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           SimpleScheduleBuilder scheduleBuilder <span class="token operator">=</span> SimpleScheduleBuilder<span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置时间周期单位秒,这样效果更明显</span>                   <span class="token comment" spellcheck="true">//.withIntervalInHours(2)  //两个小时执行一次</span>                   <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">quartzDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>LIKE_TASK_IDENTITY<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>scheduleBuilder<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>制定任务：</p><pre class=" language-java"><code class="language-java">  ```java  <span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>LikedService<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobExecutionContext<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobExecutionException<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>QuartzJobBean<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 点赞的定时任务   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LikeTask</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> LikedService likedService<span class="token punctuation">;</span>      <span class="token keyword">private</span> SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span>JobExecutionContext jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> JobExecutionException <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------quartz------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//将 Redis 里的点赞信息同步到数据库里</span>          likedService<span class="token punctuation">.</span><span class="token function">transLikedFromRedis2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          likedService<span class="token punctuation">.</span><span class="token function">transLikedCountFromRedis2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ol><ol start="3"><li><p>数据库表结构的设计</p><p>因为博客项目算是个小项目了，这里为了演示方便，点赞这个模块就先以简易为主。</p><p>liked_user_id为被赞者，liked_post_id为发出者。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>LikedStatusEnum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 用户点赞表 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLike</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//主键id</span>    <span class="token keyword">private</span> String likeId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//被点赞的用户的id</span>    <span class="token keyword">private</span> String likedUserId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//点赞的用户的id</span>    <span class="token keyword">private</span> String likedPostId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//点赞的状态.默认未点赞</span>    <span class="token keyword">private</span> Integer status <span class="token operator">=</span> LikedStatusEnum<span class="token punctuation">.</span>UNLIKE<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserLike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserLike</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">,</span> Integer status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>likedUserId <span class="token operator">=</span> likedUserId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>likedPostId <span class="token operator">=</span> likedPostId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//getter setter</span><span class="token punctuation">}</span></code></pre><p>其中，用了枚举。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 用户点赞的状态  */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> LikedStatusEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 点赞     */</span>    <span class="token function">LIKE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"点赞"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 取消赞     */</span>    <span class="token function">UNLIKE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"取消点赞/未点赞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token function">LikedStatusEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终的表，是这个样子的：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-f426870ca9d9cfd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点赞表"></p></li><li><p>具体实现业务逻辑</p><p>这里有两点：<strong>第一是，先把用户的“赞”存在缓存层；第二，适当的时间，将缓存的数据拿出，进行持久化操作。</strong></p><p>考虑到redis存储的特点，选用hash的形式对“用户点赞操作”及“用户被点赞数量”两项进行存储。采用hash的具体原因：把点赞造成的不同影响，储存为不同分区，方便管理。</p><blockquote><p>@程序猿DD</p><p>因为 Hash 里的数据都是存在一个键里，可以通过这个键很方便的把所有的点赞数据都取出。</p><p>这个键里面的数据还可以存成键值对的形式，方便存入点赞人、被点赞人和点赞状态。</p></blockquote><p>第一，先把用户的“赞”存在缓存层。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>DTO<span class="token punctuation">.</span>LikedCountDTO<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>LikedStatusEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>UserLike<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>RedisService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>util<span class="token punctuation">.</span>RedisKeyUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Cursor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ScanOptions<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">RedisService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveLiked2Redis</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> RedisKeyUtils<span class="token punctuation">.</span><span class="token function">getLikedKey</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">,</span> likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED<span class="token punctuation">,</span> key<span class="token punctuation">,</span> LikedStatusEnum<span class="token punctuation">.</span>LIKE<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlikeFromRedis</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> RedisKeyUtils<span class="token punctuation">.</span><span class="token function">getLikedKey</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">,</span> likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED<span class="token punctuation">,</span> key<span class="token punctuation">,</span> LikedStatusEnum<span class="token punctuation">.</span>UNLIKE<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteLikedFromRedis</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> RedisKeyUtils<span class="token punctuation">.</span><span class="token function">getLikedKey</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">,</span> likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incrementLikedCount</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED_COUNT<span class="token punctuation">,</span> likedUserId<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrementLikedCount</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED_COUNT<span class="token punctuation">,</span> likedUserId<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> <span class="token function">getLikedDataFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cursor<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">>></span> cursor <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED<span class="token punctuation">,</span> ScanOptions<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String key <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//分离出 likedUserId，likedPostId</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String likedUserId <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            String likedPostId <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            Integer value <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//组装成 UserLike 对象</span>            UserLike userLike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserLike</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">,</span> likedPostId<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userLike<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//存到 list 后从 Redis 中删除</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>LikedCountDTO<span class="token operator">></span> <span class="token function">getLikedCountFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cursor<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">>></span> cursor <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED_COUNT<span class="token punctuation">,</span> ScanOptions<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>LikedCountDTO<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将点赞数量存储在 LikedCountDT</span>            String key <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LikedCountDTO dto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LikedCountDTO</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从Redis中删除这条记录</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>RedisKeyUtils<span class="token punctuation">.</span>MAP_KEY_USER_LIKED_COUNT<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二，持久化操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>BlogArticleMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserLikeMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>DTO<span class="token punctuation">.</span>LikedCountDTO<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>BlogArticle<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>UserLike<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>LikedService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>RedisService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>util<span class="token punctuation">.</span>IdUtil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Pageable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LikedServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LikedService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisService redisService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserLikeMapper userLikeMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BlogArticleMapper blogArticleMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>UserLike userLike<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userLikeMapper<span class="token punctuation">.</span><span class="token function">saveLike</span><span class="token punctuation">(</span>userLike<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAll</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>UserLike userLike <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            userLikeMapper<span class="token punctuation">.</span><span class="token function">saveLike</span><span class="token punctuation">(</span>userLike<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> <span class="token function">getLikedListByLikedUserId</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> <span class="token function">getLikedListByLikedPostId</span><span class="token punctuation">(</span>String likedPostId<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getByLikedUserIdAndLikedPostId</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserLike userLike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserLike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userLike<span class="token punctuation">.</span><span class="token function">setLikedPostId</span><span class="token punctuation">(</span>likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>        userLike<span class="token punctuation">.</span><span class="token function">setLikedUserId</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userLikeMapper<span class="token punctuation">.</span><span class="token function">searchLike</span><span class="token punctuation">(</span>userLike<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transLikedFromRedis2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>UserLike<span class="token operator">></span> userLikeList <span class="token operator">=</span> redisService<span class="token punctuation">.</span><span class="token function">getLikedDataFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>UserLike like <span class="token operator">:</span> userLikeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer userLikeExist <span class="token operator">=</span> userLikeMapper<span class="token punctuation">.</span><span class="token function">searchLike</span><span class="token punctuation">(</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>userLikeExist <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                userLikeMapper<span class="token punctuation">.</span><span class="token function">updateLike</span><span class="token punctuation">(</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                like<span class="token punctuation">.</span><span class="token function">setLikeId</span><span class="token punctuation">(</span>IdUtil<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                userLikeMapper<span class="token punctuation">.</span><span class="token function">saveLike</span><span class="token punctuation">(</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transLikedCountFromRedis2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>LikedCountDTO<span class="token operator">></span> likedCountDTOs <span class="token operator">=</span> redisService<span class="token punctuation">.</span><span class="token function">getLikedCountFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>LikedCountDTO dto <span class="token operator">:</span> likedCountDTOs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            JSONObject blogArticle <span class="token operator">=</span> blogArticleMapper<span class="token punctuation">.</span><span class="token function">getArticleById</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> blogArticle<span class="token punctuation">)</span><span class="token punctuation">{</span>                BlogArticle article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlogArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                article<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                article<span class="token punctuation">.</span><span class="token function">setArticleId</span><span class="token punctuation">(</span>blogArticle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"articleId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                article<span class="token punctuation">.</span><span class="token function">setArticleLike</span><span class="token punctuation">(</span>blogArticle<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token string">"articleLike"</span><span class="token punctuation">)</span> <span class="token operator">+</span> dto<span class="token punctuation">.</span><span class="token function">getLikedNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blogArticleMapper<span class="token punctuation">.</span><span class="token function">updateArticle</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="5"><li><p>用到的工具类</p><p>对点赞信息进行redis储存的id生成：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisKeyUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//保存用户点赞数据的key</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MAP_KEY_USER_LIKED <span class="token operator">=</span> <span class="token string">"MAP_USER_LIKED"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存用户被点赞数量的key</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MAP_KEY_USER_LIKED_COUNT <span class="token operator">=</span> <span class="token string">"MAP_USER_LIKED_COUNT"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 拼接被点赞的用户id和点赞的人的id作为key。格式 222222::333333     * @param likedUserId 被点赞的人id     * @param likedPostId 点赞的人的id     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getLikedKey</span><span class="token punctuation">(</span>String likedUserId<span class="token punctuation">,</span> String likedPostId<span class="token punctuation">)</span><span class="token punctuation">{</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因为想做一个分布式项目，所以项目用到的id生成策略采用了雪花算法，代码过长，就不贴了。</p></li><li><p>测试，给测试来个接口，用postman测吧。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>UserLike<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>hanor<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>RedisService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestBody<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/like"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LikeController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisService redisService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doLike</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserLike userLike<span class="token punctuation">)</span><span class="token punctuation">{</span>        redisService<span class="token punctuation">.</span><span class="token function">saveLiked2Redis</span><span class="token punctuation">(</span>userLike<span class="token punctuation">.</span><span class="token function">getLikedUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>userLike<span class="token punctuation">.</span><span class="token function">getLikedPostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisService<span class="token punctuation">.</span><span class="token function">incrementLikedCount</span><span class="token punctuation">(</span>userLike<span class="token punctuation">.</span><span class="token function">getLikedPostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>发送值为：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span>        <span class="token string">"likedUserId"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">,</span>        <span class="token string">"likedPostId"</span><span class="token operator">:</span><span class="token string">"456"</span><span class="token punctuation">}</span></code></pre><p>此时缓存中可见：</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-50ad4050f1d8cc3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>过了一会，缓存数据将被存进数据库中：缓存中没有数据，且值被写入数据库。</p><p><img src="https://upload-images.jianshu.io/upload_images/19860184-c0ad37bfc244af80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li></ol><p>至此，点赞完成！！！撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
            <tag> redis缓存 </tag>
            
            <tag> quartz定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础（四）路由相关</title>
      <link href="/2019/12/26/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B7%AF%E7%94%B1%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/12/26/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B7%AF%E7%94%B1%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Vue基础（四）"><a href="#Vue基础（四）" class="headerlink" title="Vue基础（四）"></a>Vue基础（四）</h1><h1 id="5-路由"><a href="#5-路由" class="headerlink" title="5.路由"></a>5.路由</h1><ul><li><p>若在建立项目初期，未选择路由配置，可在此处<strong>添加router</strong></p><blockquote><p>npm install vue-router –save-dev</p></blockquote><p>然后自己在 src - router新建index.js文件，配置路由相关。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> Vue from <span class="token string">'vue'</span><span class="token keyword">import</span> Router from <span class="token string">'vue-router'</span><span class="token keyword">import</span> HelloWorld from <span class="token string">'@/components/HelloWorld'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> HelloWorld    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//去掉地址中的#</span>    mode<span class="token operator">:</span><span class="token string">"history"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>并在main.js中注册</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> Vue from <span class="token string">'vue'</span><span class="token keyword">import</span> App from <span class="token string">'./App'</span><span class="token comment" spellcheck="true">//引用router</span><span class="token keyword">import</span> router from <span class="token string">'./router'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//注册router</span>  router<span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>最后在App.vue中添加要展现的内容</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre></li><li><p><strong>路由的使用：</strong>超链接可以不用<a>标签，避免页面的自动刷新；写法如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token operator">></span>HelloWorld<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre></li><li><p><strong>vue自带http请求：vue-resource</strong></p><blockquote><p>npm install vue-resource –save-dev</p></blockquote><p>先在main.js中引入vue-resource</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">import</span> VueResource from <span class="token string">'vue-resource'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//use之后，就可以在全局任何地方使用    </span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueResource<span class="token punctuation">)</span></code></pre><p>然后，在组件中：</p><pre class=" language-java"><code class="language-java"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://xxxxx"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>users <span class="token operator">=</span> data<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础（三）组件相关</title>
      <link href="/2019/12/25/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%84%E4%BB%B6%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/12/25/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%84%E4%BB%B6%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Vue基础（三）"><a href="#Vue基础（三）" class="headerlink" title="Vue基础（三）"></a>Vue基础（三）</h1><blockquote><p>安装vue</p><ul><li>安装npm：在nodejs.org下载nodejs（用node -v和npm -v检查；另可用npm install -g npm升级npm）</li><li>使用淘宝镜像（略过）$ npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></li><li>安装vue-cli  :  cnpm install vue-cli -g   //全局安装 vue-cli</li></ul></blockquote><p>安装后，选定文件夹，执行</p><pre class=" language-java"><code class="language-java">npm init webpack<span class="token string">"project-name"</span></code></pre><h2 id="4-组件"><a href="#4-组件" class="headerlink" title="4. 组件"></a>4. 组件</h2><ul><li><p>初识组件：在app.js文件中</p><pre class=" language-java"><code class="language-java">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"gtc"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    template<span class="token operator">:</span>'        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">:</span> 哈哈哈哈哈            <span class="token operator">&lt;</span>button <span class="token annotation punctuation">@ckick</span><span class="token operator">=</span><span class="token string">"change"</span> <span class="token operator">></span>更改<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>'<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//template只能有一个根标签，</span>     data<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span><span class="token punctuation">{</span>             name<span class="token operator">:</span> <span class="token string">"初始"</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span><span class="token punctuation">{</span>        change<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"改变了"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>建立自己的组件：</p><ol><li>在components文件夹下建立Users.vue</li></ol><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"users"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"user in users"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>export <span class="token keyword">default</span><span class="token punctuation">{</span>        name<span class="token operator">:</span><span class="token string">"users"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                users<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"Herry"</span><span class="token punctuation">,</span><span class="token string">"Bucky"</span><span class="token punctuation">,</span><span class="token string">"Jim"</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>srript<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>    <span class="token comment" spellcheck="true">//加了scoped后，可以控制样式的作用范围，不会发生冲突或继承</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><ol start="2"><li><p>注册组件：让我们的组件可以被使用</p><p>2.1 在<strong>main.js</strong>中进行，<strong>全局注册组件（不推荐全局）</strong></p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">import</span> Users from <span class="token string">'./components/Users'</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span>Users<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用时：在App.vue中可以直接使用<users></users>标签</p><p>2.2 局部，在App.vue中</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li></ol></li></ul><pre><code> &lt;script&gt; import Users from &#39;./components/Users&#39; export default{         name:&quot;users&quot;,         data(){             return{             }         },         components:{             &quot;users&quot;:Users    //此处users可省略，起名时不能为关键字         }     } &lt;/srript&gt; ```</code></pre><ul><li><p>组件传值</p><ol><li><p><strong>父组件向子组件传值</strong>：把公共的参数写进父组件，通过自定义属性，向子组件传值，子组件相应的进行接值；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//父组件App.vue中</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>users v<span class="token operator">-</span>bind<span class="token operator">:</span>uzer<span class="token operator">=</span><span class="token string">"users"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>users<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>export <span class="token keyword">default</span><span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>            users<span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"jim"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span>location<span class="token operator">:</span><span class="token string">"shenyang"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"tim"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">,</span>location<span class="token operator">:</span><span class="token string">"shenyang"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"mim"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">,</span>location<span class="token operator">:</span><span class="token string">"shenyang"</span><span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>compoents<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>在子组件中</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>script<span class="token operator">></span>export <span class="token keyword">default</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">'users'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//可以用 props:["uzer"]</span>    props<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取属性uzer的值，所以在调用时，直接用uzer；</span>        <span class="token comment" spellcheck="true">//例如：&lt;li v-for = "user in users">&lt;/li></span>        uzer<span class="token operator">:</span><span class="token punctuation">{</span>            type<span class="token operator">:</span>Array<span class="token punctuation">,</span>            required<span class="token operator">:</span><span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p><strong>子组件向父组件传值：</strong>效果为，子组件间有相同的依赖元素，点击某一子组件，则所有依赖于该元素的值都发生改变；</p><p>子组件：</p><pre class=" language-java"><code class="language-java">methods<span class="token operator">:</span><span class="token punctuation">{</span>    change<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注册</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"titleChanged"</span><span class="token punctuation">,</span><span class="token string">"改变后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>父组件：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>app<span class="token operator">-</span>header v<span class="token operator">-</span>on<span class="token operator">:</span>titleChanged<span class="token operator">=</span><span class="token string">"updateTitle($event)"</span>            v<span class="token operator">-</span>bind<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>header<span class="token operator">></span>         <span class="token operator">&lt;</span>app<span class="token operator">-</span>footer v<span class="token operator">-</span>bind<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>footer<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    export <span class="token keyword">default</span><span class="token punctuation">{</span>             name<span class="token operator">:</span><span class="token string">'App'</span><span class="token punctuation">,</span>             <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">return</span><span class="token punctuation">{</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>             methods<span class="token operator">:</span><span class="token punctuation">{</span>                 <span class="token function">updateTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>             components<span class="token operator">:</span><span class="token punctuation">{</span>                 <span class="token string">"app-header"</span><span class="token operator">:</span>Header<span class="token punctuation">,</span>                 <span class="token string">"app-footer"</span><span class="token operator">:</span>Footer             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ol></li></ul><ul><li><p>生命周期：</p><p>在methods{}后，可添加</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191227162941610.png" alt="钩子函数"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础学习(二)</title>
      <link href="/2019/12/24/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89Web%E9%80%9A%E8%AE%AF/"/>
      <url>/2019/12/24/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89Web%E9%80%9A%E8%AE%AF/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Vue基础（二）"><a href="#Vue基础（二）" class="headerlink" title="Vue基础（二）"></a>Vue基础（二）</h1><h2 id="3-web通讯"><a href="#3-web通讯" class="headerlink" title="3. web通讯"></a>3. web通讯</h2><p>引入ajax（axios）</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.staticfile.org/axios/0.18.0/axios.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></blockquote><ul><li><p>get方法</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> info <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      info<span class="token operator">:</span> null    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/try/ajax/json_demo.json'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 请求失败处理</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>网站列表<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span>div    v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"site in info"</span>  <span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> site<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      info<span class="token operator">:</span> null    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/try/ajax/json_demo.json'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sites<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 请求失败处理</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>get传参格式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 直接在 URL 上添加参数 ID=12345</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以通过 params 设置参数：</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    params<span class="token operator">:</span> <span class="token punctuation">{</span>      ID<span class="token operator">:</span> <span class="token number">12345</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>post方法</p><pre class=" language-java"><code class="language-java">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    firstName<span class="token operator">:</span> <span class="token string">'Fred'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 参数 firstName</span>    lastName<span class="token operator">:</span> <span class="token string">'Flintstone'</span>    <span class="token comment" spellcheck="true">// 参数 lastName</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 基础 </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础（一）基本语法</title>
      <link href="/2019/12/23/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/12/23/Vue%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Vue基础-一"><a href="#Vue基础-一" class="headerlink" title="Vue基础(一)"></a>Vue基础(一)</h1><h2 id="1-模板语法"><a href="#1-模板语法" class="headerlink" title="1.模板语法"></a>1.模板语法</h2><ul><li><p>v-cloak 解决插值表达式的闪烁问题，但是只会覆盖自己的插值表达式，不会覆盖元素的值；v-text没有闪烁问题，会覆盖元素中原本的内容。</p></li><li><p>v-html 会覆盖元素内容，但是会将本身内容进行html渲染</p><pre class=" language-java"><code class="language-java">v<span class="token operator">-</span>bind<span class="token operator">:</span>href   直接绑定；v<span class="token operator">-</span>html        将需要绑定的值解析（比如字符里含有html标签，可以被解析）</code></pre></li></ul><ul><li><p>v-bind 绑定 ，<strong>属性绑定，用冒号绑定，只能从model层绑定到view层</strong>（即，script下的message改变，div中的数据也随之改变；但是反之不行）</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> ok <span class="token operator">?</span> <span class="token string">'YES'</span> <span class="token operator">:</span> <span class="token string">'NO'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 告诉id，此次要绑定的，是一个变量，名字叫id <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"'list-' + id"</span><span class="token operator">></span>菜鸟教程<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    ok<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    message<span class="token operator">:</span> <span class="token string">'RUNOOB'</span><span class="token punctuation">,</span>    id <span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>v-on 绑定事件，<strong>用冒号绑定</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"reverseMessage"</span><span class="token operator">></span>反转字符串<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'Runoob!'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    reverseMessage<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul><ul><li><p>v-model <strong>双向绑定</strong>，指令只能在 input、select、textarea、checkbox、radio 等<strong>表单</strong>控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//此处，改变v-model文本框的值，&lt;P>的值随之改变</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'Runoob!'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul><ul><li><p>v-if 根据true/false执行，<strong>用等号绑定</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"seen"</span><span class="token operator">></span>现在你看到我了<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    seen<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"type === 'A'"</span><span class="token operator">></span>        A      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"type === 'B'"</span><span class="token operator">></span>        B      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"type === 'C'"</span><span class="token operator">></span>        C      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>        Not A<span class="token operator">/</span>B<span class="token operator">/</span>C      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>      type<span class="token operator">:</span> <span class="token string">'C'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul><ul><li><p>v-for循环</p><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ol<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"site in sites"</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">{</span> site<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>      sites<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'Runoob'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'Google'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'Taobao'</span> <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>  也可以对一个对象迭代：</p><ol><li>如果只有一个值 value，则该值为属性的值，即“菜鸟教程”；</li><li>如果两个值，value仍为值即“菜鸟教程”，key为属性名即“name”;</li><li>如果三个参数，前两个参数同上，第三个为序号索引，即“0”</li></ol><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"value in object"</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(value, key) in object"</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>       <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(value, key, index) in object"</span><span class="token operator">></span>       <span class="token punctuation">{</span><span class="token punctuation">{</span> index <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"n in 10"</span><span class="token operator">></span>       <span class="token punctuation">{</span><span class="token punctuation">{</span> n <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>      object<span class="token operator">:</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'菜鸟教程'</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">'http://www.runoob.com'</span><span class="token punctuation">,</span>        slogan<span class="token operator">:</span> <span class="token string">'学的不仅是技术，更是梦想！'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>  若为集合的遍历：其中item同上面的value，即{ id: 1, name: ‘李斯’ }，而 i 则为序号索引</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button <span class="token annotation punctuation">@click</span><span class="token operator">=</span><span class="token string">"add"</span><span class="token operator">></span>添加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, i) in list"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.id"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>      var vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">{</span>          name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>          newId<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          list<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'李斯'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'吕不韦'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'嬴政'</span> <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//注意这里是unshift</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>newId<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">''</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>  为了解决checkbox等内容的绑定问题，要加key</p><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, i) in list"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.id"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></code></pre></li></ul><ul><li><p>缩写</p><p><strong>v-bind</strong></p><p>Vue.js 为两个最为常用的指令提供了特别的缩写：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 完整语法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a v<span class="token operator">-</span>bind<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 缩写 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><p><strong>v-on 缩写</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 完整语法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"doSomething"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 缩写 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token annotation punctuation">@click</span><span class="token operator">=</span>"doSo</code></pre><p>另：</p><p>当我们给一个比如 props 中，或者 data 中被观测的对象添加一个新的属性的时候，不能直接添加，必须使用 Vue.set 方法。Vue.set 方法用来新增对象的属性。如果要增加属性的对象是响应式的，那该方法可以确保属性被创建后也是响应式的，同时触发视图更新<img src="https://www.runoob.com/wp-content/uploads/2017/10/20170608010237405.png" alt="用Vue.set赋值.png"></p></li></ul><h2 id="2-script-中的方法"><a href="#2-script-中的方法" class="headerlink" title="2. script 中的方法"></a>2. script 中的方法</h2><ul><li><p>插值表达式也可以用来写方法</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token string">'night'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>在<span class="token operator">&lt;</span>script<span class="token operator">></span>中    methods<span class="token operator">:</span><span class="token punctuation">{</span>        hi<span class="token operator">:</span> <span class="token function">function</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'Good'</span> <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单引号和双引号应该都可以</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>过滤器：过滤器函数接受表达式的值作为第一个参数。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token operator">|</span> capitalize <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'runoob'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  filters<span class="token operator">:</span> <span class="token punctuation">{</span>    capitalize<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>      value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>过滤器可以串联：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token operator">|</span> filterA <span class="token operator">|</span> filterB <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这里，message 是第一个参数，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数</span><span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token operator">|</span> <span class="token function">filterA</span><span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>过滤器可以接收多个表达式，message 和 mesage2 将作为过滤器的前两个参数:</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> message<span class="token punctuation">,</span>message2 <span class="token operator">|</span> <span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span>    message2<span class="token operator">:</span> <span class="token string">'runoob'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  filters<span class="token operator">:</span> <span class="token punctuation">{</span>    capitalize<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>      value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>             value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>value2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>value2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>value2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&lt;br>'</span><span class="token operator">+</span>value3    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//输出 RunoobrunooB aa</span></code></pre></li></ul><ul><li><p>computed</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>声明了一个计算属性 reversedMessage 。    提供的函数将用作属性 vm<span class="token punctuation">.</span>reversedMessage 的 getter 。    vm<span class="token punctuation">.</span>reversedMessage 依赖于 vm<span class="token punctuation">.</span>message，在 vm<span class="token punctuation">.</span>message 发生改变时，vm<span class="token punctuation">.</span>reversedMessage 也会更新。<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>原始字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>计算后反转字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> reversedMessage <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'Runoob!'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算属性的 getter</span>    reversedMessage<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// `this` 指向 vm 实例</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> site <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'Google'</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">'http://www.google.com'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    site<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// getter</span>      get<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// setter</span>      set<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> names<span class="token punctuation">[</span>names<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 调用 setter， vm.name 和 vm.url 也会被对应更新</span>vm<span class="token punctuation">.</span>site <span class="token operator">=</span> <span class="token string">'菜鸟教程 http://www.runoob.com'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'name: '</span> <span class="token operator">+</span> vm<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'url: '</span> <span class="token operator">+</span> vm<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul><ul><li><p>computer 和 method 比较:如下面代码，cnt 是独立于 vm 对象的变量。在使用 reversedMessage 这个计算属性的时候，第一次会执行代码，得到一个值，以后再使用 reversedMessage 这个计算属性，因为 vm 对象没有发生改变，于是界面渲染就直接用这个值，不再重复执行代码。而 reversedMessage2 没有这个缓存，只要用一次，函数代码就执行一次，于是每次返回值都不一样。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>原始字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>计算后反转字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> reversedMessage <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>计算后反转字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> reversedMessage <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>使用方法后反转字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">reversedMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>使用方法后反转字符串<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">reversedMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>var cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>var vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    message<span class="token operator">:</span> <span class="token string">'Runoob!'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算属性的 getter</span>    reversedMessage<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// `this` 指向 vm 实例</span>      cnt<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cnt<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    reversedMessage2<span class="token operator">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      cnt<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cnt<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//执行结果：</span>原始字符串<span class="token operator">:</span> Runoob<span class="token operator">!</span>计算后反转字符串<span class="token operator">:</span> <span class="token number">2</span><span class="token operator">!</span>boonuR计算后反转字符串<span class="token operator">:</span> <span class="token number">2</span><span class="token operator">!</span>boonuR使用方法后反转字符串<span class="token operator">:</span> <span class="token number">3</span><span class="token operator">!</span>boonuR使用方法后反转字符串<span class="token operator">:</span> <span class="token number">4</span><span class="token operator">!</span>boonuR</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Blog项目（杂要）</title>
      <link href="/2019/12/22/Vue-Bolg%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/12/22/Vue-Bolg%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Vue-Blog项目（杂要）"><a href="#Vue-Blog项目（杂要）" class="headerlink" title="Vue-Blog项目（杂要）"></a>Vue-Blog项目（杂要）</h1><ul><li><p>多选框：此处把多选框设为数组，即categories[]，多选后，数组内会自动保留所选的value值</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"Vue.js"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"blog.categories"</span><span class="token operator">/</span><span class="token operator">></span></code></pre></li></ul><ul><li><p>单选框：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"blog.author"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务SpringCloud</title>
      <link href="/2019/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1SpringCloud/"/>
      <url>/2019/12/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1SpringCloud/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="微服务SpringCloud"><a href="#微服务SpringCloud" class="headerlink" title="微服务SpringCloud"></a>微服务SpringCloud</h1><h2 id="1-Eureka注册中心"><a href="#1-Eureka注册中心" class="headerlink" title="1.Eureka注册中心"></a>1.Eureka注册中心</h2><h3 id="1-1-注册服务端Eureka-Server"><a href="#1-1-注册服务端Eureka-Server" class="headerlink" title="1.1 注册服务端Eureka Server"></a>1.1 注册服务端Eureka Server</h3><p>引入依赖，其中已经包含了spring-cloud的依赖，无需再引入。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>server<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>相应的配置文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>PORT<span class="token punctuation">:</span><span class="token number">50101</span><span class="token punctuation">}</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> xc<span class="token punctuation">-</span>govern<span class="token punctuation">-</span>center<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 服务注册，是否将自己注册到Eureka服务中</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 服务发现，是否从Eureka中获取注册信息</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># Eureka客户端与Eureka服务端的交互地址，高可用状态配置对方的地址，单机状态配置自己（如果不配置则默认本机8761端口）</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>EUREKA_SERVER<span class="token punctuation">:</span>http<span class="token punctuation">:</span>//eureka02<span class="token punctuation">:</span>50102/eureka/<span class="token punctuation">}</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否开启自我保护，本地测试不开启，实际要开启</span>    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">60000 </span><span class="token comment" spellcheck="true"># 服务注册表清理间隔，默认60*1000毫秒</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>EUREKA_DOMAIN<span class="token punctuation">:</span>eureka01<span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 主机名</span></code></pre><p>其中注意，defaultZone为配置的注册中心的地址（即，需要向哪里进行注册），此处的eureka02对应的是另一配置的主机名（即另一配置的instance-hostname:eureka02），而为了使该主机名能够被正确解析，需要在本机的System32-drivers-etc-host文件中进行配置，如：</p><pre class=" language-yaml"><code class="language-yaml">127.0.0.1    eureka01127.0.0.1    eureka02    </code></pre><p>同时，为了启动的灵活性，可以在启动时配置VM options环境参数，如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>DPORT<span class="token operator">=</span><span class="token number">50101</span> <span class="token operator">-</span>DEUREKA_DOMAIN<span class="token operator">=</span>eureka01 <span class="token operator">-</span>DEUREKA_SERVER<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>eureka02<span class="token operator">:</span><span class="token number">50102</span><span class="token operator">/</span>eureka<span class="token operator">/</span> </code></pre><p>最后，在启动类标识注解@EnableEurekaServer，注明该工程为注册中心服务端。</p><h3 id="1-2-注册客户端-Eureka-Client"><a href="#1-2-注册客户端-Eureka-Client" class="headerlink" title="1.2 注册客户端 Eureka Client"></a>1.2 注册客户端 Eureka Client</h3><p>引入依赖，其中已经包含了spring-cloud的依赖，无需再引入。</p><pre class=" language-java"><code class="language-java">注意，此处依赖不要引错！不是spring<span class="token operator">-</span>cloud<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client ！！！<span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>据说没有spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web会注册失败，未验证。<span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            </code></pre><p>相应的配置文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>EUREKA_SERVER<span class="token punctuation">:</span>http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>50101/eureka/<span class="token punctuation">}</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 将自己的ip注册到eureka服务中</span>    <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>IP_ADDRESS<span class="token punctuation">:</span>127.0.0.1<span class="token punctuation">}</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 指定实例id</span></code></pre><p>最后，在启动类标识注解@EnableEurekaClient，注明该工程为注册中心客户端。此处，推荐使用@EnableDiscoveryClient，异同请自己百度。</p><h2 id="2-Ribbon负载均衡"><a href="#2-Ribbon负载均衡" class="headerlink" title="2 Ribbon负载均衡"></a>2 Ribbon负载均衡</h2><h3 id="2-1-服务端-客户端负载均衡的概念"><a href="#2-1-服务端-客户端负载均衡的概念" class="headerlink" title="2.1 服务端/客户端负载均衡的概念"></a>2.1 服务端/客户端负载均衡的概念</h3><p>服务端负载均衡：负载均衡器维护一份服务列表。硬件设备实现，如F5，Array等；软件实现，如LVS、Nginx等。</p><p>客户端负载均衡：客户端维护一份服务列表，例如，Ribbon从注册中心获取服务列表，Ribbon根据负载均衡算法直接请求到具体的微服务（中间省去了负载均衡服务）。</p><p><strong>两者区别</strong>：服务端负载均衡，是客户端发送请求后的接收端（即服务端）来维护服务列表，先接收信息，再根据一定的算法对列表中的项目（各微服务）进行<strong>转发</strong>，实现服务端负载均衡。客户端负载均衡：是发起者（客户端）自己维护一份服务列表（比如像Ribbon这种，从注册中心获取服务列表），然后再根据算法对列表中的项目（各微服务）进行<strong>调用</strong>。</p><h3 id="2-2-Ribbon负载均衡的实现"><a href="#2-2-Ribbon负载均衡的实现" class="headerlink" title="2.2 Ribbon负载均衡的实现"></a>2.2 Ribbon负载均衡的实现</h3><p>Spring Cloud引入Ribbon配合 restTemplate 实现客户端负载均衡。Java中远程调用的技术有很多，如： webservice、socket、rmi、Apache HttpClient、OkHttp等，互联网项目使用基于http的客户端较多，这里使用OkHttp实现。</p><p>首先，在客户端（发起者）添加Ribbon以及远程调用技术的依赖：由于依赖了spring-cloud-starter-eureka，会自动添加spring-cloud-starter-ribbon依赖。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>ribbon<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp3<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>okhttp<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>然后，添加配置文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>EUREKA_SERVER<span class="token punctuation">:</span>http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>50101/eureka/<span class="token punctuation">}</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>     <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 将自己的ip注册到eureka服务中</span>     <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>IP_ADDRESS<span class="token punctuation">:</span>127.0.0.1<span class="token punctuation">}</span>     <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 指定实例id</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">MaxAutoRetries</span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token comment" spellcheck="true">#最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试</span>  <span class="token key atrule">MaxAutoRetriesNextServer</span><span class="token punctuation">:</span> <span class="token number">3 </span><span class="token comment" spellcheck="true">#切换实例的重试次数</span>  <span class="token key atrule">OkToRetryOnAllOperations</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true">#对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false</span>  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000  </span><span class="token comment" spellcheck="true">#请求连接的超时时间</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">6000 </span><span class="token comment" spellcheck="true">#请求处理的超时时间</span></code></pre><p>为了一会儿实现远程调用，这时要添加相应的Bean，注意因为调用时就要执行负载均衡策略，所以在此添加@LoadBalanced注解。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>LoadBalanced<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>OkHttp3ClientHttpRequestFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OkHttp3ClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>完成单元测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>RestTemplate restTemplate<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRibbon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在注册中心注册的服务名称</span>    String serviceId <span class="token operator">=</span> <span class="token string">"XC-SERVICE-MANAGE-CMS"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行远程调用方法</span>        ResponseEntity<span class="token operator">&lt;</span>CmsPage<span class="token operator">></span> forEntity <span class="token operator">=</span> restTemplate            <span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">"http://"</span> <span class="token operator">+</span> serviceId <span class="token operator">+</span> <span class="token string">"/get"</span><span class="token punctuation">,</span> CmsPage<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CmsPage cmsPage <span class="token operator">=</span> forEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cmsPage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>进行测试：先运行注册中心项目；再运行需要被调用（服务端）的项目，通过不同端口号运行多个实例，观察注册中心，查看这些实例是已经否完成了注册；运行测试类，进行测试。</p><p><strong>注意，添加@LoadBalanced注解后，restTemplate会走LoadBalancerInterceptor拦截器，此拦截器中会通过 RibbonLoadBalancerClient查询服务地址，可以在此类打断点观察每次调用的服务地址和端口，两个cms服务会轮 流被调用。</strong></p><p>最初在写测试代码时一直在思考，“远程调用时的服务列表是怎么从注册中心获取的？”。后来想明白了，要想执行负载均衡，该项目本身必须要通过Eureka在注册中心进行“发现”，也就是application.yml中配置的eureka各参数，这样，自己就和注册中心有了关联，就可以获取到服务列表（很多的 “XC-SERVICE-MANAGE-CMS” 实例）。这时，restTemplate.getForEntity()方法中的http后面的服务名称（serviceId，即  “XC-SERVICE-MANAGE-CMS”） 就会去注册中心寻找相应的地址，完成远程请求。</p><h3 id="2-3-Feign远程调用"><a href="#2-3-Feign远程调用" class="headerlink" title="2.3 Feign远程调用"></a>2.3 Feign远程调用</h3><p>Spring Cloud引入 Feign并且集成了Ribbon实现客户端负载均衡调用。</p><p>首先，引入Feign的依赖，这里因为Feign集成了Ribbon，所以可以把之前的Ribbon依赖注释掉。</p><pre class=" language-javaja"><code class="language-javaja"><dependency>    <groupId>org.springframework.cloud</groupId>    <artifactId>spring-cloud-starter-openfeign</artifactId></dependency></code></pre><p>然后，建立一个Feign的接口，用于远程调用。<strong>注意</strong>，这里接口的url，请求类型，返回值类型都要和正常请求一样，例如@PathVariable(“xxx”) , @RequestParam(“xxx”)都一定要写全。<strong>返回值为复杂对象时，其类型必须有无参构造函数。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>xuecheng<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>cms<span class="token punctuation">.</span>CmsPage<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"XC-SERVICE-MANAGE-CMS"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CmsFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/cms/page/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CmsPage <span class="token function">findCmsPageById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>启动类，<strong>一定要加上 @EnableFeignClients 注解</strong></p><p>最后，编写测试类。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>CmsFeignClient cmsFeignClient<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFeign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CmsPage cmsPage <span class="token operator">=</span> cmsFeignClient<span class="token punctuation">.</span><span class="token function">findCmsPageById</span><span class="token punctuation">(</span><span class="token string">"5a754adf6abb500ad05688d9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cmsPage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>启动顺序和上一节类似。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker建MySql数据库</title>
      <link href="/2019/12/21/Docker%E5%BB%BAMySql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/12/21/Docker%E5%BB%BAMySql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Docker建MySql数据库"><a href="#Docker建MySql数据库" class="headerlink" title="Docker建MySql数据库"></a>Docker建MySql数据库</h1><p>若有mar数据库，先卸载。</p><p>下载mysql镜像</p><pre class=" language-java"><code class="language-java">docker pull mysql<span class="token operator">:</span><span class="token number">5.7</span></code></pre><p>创建并运行容器：</p><ol><li><p>首先，MySQL(5.7.19)的默认配置文件是 /etc/mysql/my.cnf 文件。如果想要自定义配置，建议向 /etc/mysql/conf.d 目录中创建 .cnf 文件。新建的文件可以任意起名，只要保证后缀名是 cnf 即可。新建的文件中的配置项可以覆盖 /etc/mysql/my.cnf 中的配置项。</p><p>具体操作：首先需要创建将要映射到容器中的目录以及.cnf文件，然后再创建容器</p><pre class=" language-java"><code class="language-java"># pwd <span class="token operator">/</span>opt# mkdir <span class="token operator">-</span>p docker_v<span class="token operator">/</span>mysql<span class="token operator">/</span>conf# cd docker_v<span class="token operator">/</span>mysql<span class="token operator">/</span>conf# touch my<span class="token punctuation">.</span>cnf# docker run <span class="token operator">-</span>p <span class="token number">3306</span><span class="token operator">:</span><span class="token number">3306</span> <span class="token operator">--</span>name mysql<span class="token operator">-</span>con <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>docker_v<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token number">123456</span> <span class="token operator">-</span>d mysql<span class="token operator">/</span>mysql<span class="token operator">-</span>server<span class="token operator">:</span><span class="token number">5.7</span></code></pre></li></ol><ol start="2"><li><p>此时是无法连接mysql的，必须修改成允许远程连接</p><pre class=" language-java"><code class="language-java">#通过这个命令进入容器内docker exec <span class="token operator">-</span>it mysql<span class="token operator">-</span>con bash#连接mysqlmysql <span class="token operator">-</span>u root <span class="token operator">-</span>p#修改mysql允许远程连接GRANT ALL PRIVILEGES ON <span class="token operator">*</span><span class="token punctuation">.</span>* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> WITH GRANT OPTIONFLUSH PRIVILEGES</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> docker </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父子类：返回值、传参、转型问题</title>
      <link href="/2019/12/20/%E7%88%B6%E5%AD%90%E7%B1%BB%EF%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%E3%80%81%E4%BC%A0%E5%8F%82%E3%80%81%E8%BD%AC%E5%9E%8B%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/20/%E7%88%B6%E5%AD%90%E7%B1%BB%EF%BC%9A%E8%BF%94%E5%9B%9E%E5%80%BC%E3%80%81%E4%BC%A0%E5%8F%82%E3%80%81%E8%BD%AC%E5%9E%8B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="父子类：返回值、传参、转型问题"><a href="#父子类：返回值、传参、转型问题" class="headerlink" title="父子类：返回值、传参、转型问题"></a>父子类：返回值、传参、转型问题</h1><ol><li><p>返回值要求是父类，则返回子类也可以；</p></li><li><p>返回值要求是子类，则不能给定父类作为返回；</p></li><li><p>参数需要父类，传子类可以；</p></li><li><p>参数需要子类，传父类，不可以（假设，在方法中调用了子类的方法，而父类就无法调用此方法，所以不可以）</p></li><li><p>向上转型，比较常用。用子类对象（小范围）去实例化父类对象（大范围）</p><pre class=" language-java"><code class="language-java">Father father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>另，抛异常：</p><ol><li><p>无论方法的返回值定义是什么类型，抛异常后的“异常捕捉类”的返回值和方法返回值无关，即，方法返回值要求为某一对象，而异常捕捉后，返回为字符串，并无影响。</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> CmsPageResult <span class="token function">add</span><span class="token punctuation">(</span>CmsPage cmsPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> cmsPage<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span>CommonCode<span class="token punctuation">.</span>FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CmsPageResult</span><span class="token punctuation">(</span>CommonCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><pre><code>   @ResponseBody   @ExceptionHandler(CustomException.class)   public String customException(CustomException e){       LOGGER.error(&quot;catch exception:{}&quot;,e.getMessage());       return &quot;hhahhaha&quot;;</code></pre><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取时间及格式化</title>
      <link href="/2019/12/19/%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/"/>
      <url>/2019/12/19/%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="获取时间及格式化"><a href="#获取时间及格式化" class="headerlink" title="获取时间及格式化"></a>获取时间及格式化</h1><p>获取时间：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取当前时间</span>String filePath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"YYYY/MM/dd/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>日期格式化：</p><pre class=" language-java"><code class="language-java">SimpleDateFormat dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date timestamp <span class="token operator">=</span> dateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> sourceAsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 时间获取 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
